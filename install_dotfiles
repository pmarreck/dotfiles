#!/usr/bin/env bash

# Declare an array of strings
declare -a dotfiles=(
    .ansiweatherrc
    .bash_profile
    .bashrc
    .commandpromptconfig
    .direnvrc
    .envconfig
    .envrc
    .esrc
    .gemrc
    .gitconfig
    .gitconfig.old-possibly-useful
    .gitignore
    .inputrc
    .netrc.gpg
    .pathconfig
    .pre-oh-my-bash.bashrc
    .profile
    .secrets.gpg
    .tool-versions
    .wezterm.lua
    Brewfile
    Tapfile
    inthebeginning.jpg
    manual_configuration_changelog.txt
)
echo "List of dotfiles to install:"
echo "${dotfiles[@]}"

curdir=$(pwd)

# Get the directory of this script and cd to it
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

declare -a scriptfiles=$(ls -d Scripts/*)
echo "List of script files to install:"
echo "${scriptfiles[@]}"

cd ~

# symlink the bin and lib directories
pushd $HOME
ln -sfv dotfiles/bin # this assumes your dotfiles repo is in $HOME
ln -sfv dotfiles/lib
popd

# make a Scripts directory if it doesn't exist
mkdir -p Scripts

for dotfile in ${dotfiles[@]}; do
    if [[ ! -L $dotfile ]]; then
        if [ -f "$dotfile" ]; then
            echo "$dotfile already exists; renaming to $dotfile.old"
            mv -v "$dotfile" "$dotfile.old"
        fi
    fi
    ln -sfv "dotfiles/$dotfile"
done

for scriptfile in ${scriptfiles[@]}; do
    if [[ ! -L $scriptfile ]]; then
        if [ -f "$scriptfile" ]; then
            echo "$scriptfile already exists; renaming to $scriptfile.old"
            mv -v "$scriptfile" "$scriptfile.old"
        fi
    fi
    echo "Linking $scriptfile"
    ln -sfv ../dotfiles/$scriptfile $scriptfile
done

cd $curdir

echo
echo "note: Library/Application Support and Library/Services are not installed by default"
echo "since they are macOS-only, please install manually."
echo "Don't forget to decrypt the .gpg files using 'decrypt filename.gpg > filename'!"
