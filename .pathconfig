$DEBUG_SHELLCONFIG && $INTERACTIVE_SHELL && echo "Running .pathconfig" # || printf "#"
# echo "Current PATH is $PATH"

# All path configs here should replace any existing version of themselves in the PATH before appending
# (idempotent)

# function to prepend paths in an idempotent way
prepend_path() {
  # $1: path variable name
  # $2: path to prepend
  # ensure both arguments are set
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "prepend_path lets you prepend a path after gsubbing it out first."
    echo "Usage: prepend_path <name_of_path_var> <path_to_prepend>" >&2
    return 1
  fi
  # ${1} is, for example, "PATH"
  # ${!1} is the value of PATH (dereferenced)
  local temp_path=${!1}
  # remove any duplicate entries
  temp_path="${temp_path//$2/}"
  # prepend the new entry
  temp_path="$2:$temp_path"
  # replace any resulting double colons with single ones
  temp_path="${temp_path//::/:}"
  # strip any trailing colons
  temp_path="${temp_path%:}"
  # export the final result
  export ${1}="$temp_path"
}

# Add Python installed scripts to front of PATH
# export PATH=/usr/local/share/python:${PATH/\/usr\/local\/share\/python:/}
# Move /usr/local/bin and /usr/local/sbin to the front of PATH by subbing it out and prepending
# export PATH=/usr/local/sbin:${PATH/\/usr\/local\/sbin:/}
# export PATH=/usr/local/bin:${PATH/\/usr\/local\/bin:/}
## # Move /usr/local/Homebrew/bin and /usr/local/Homebrew/sbin to the front of PATH by subbing it out and prepending
## export PATH=/usr/local/Homebrew/sbin:${PATH/\/usr\/local\/Homebrew\/sbin:/}
## export PATH=/usr/local/Homebrew/bin:${PATH/\/usr\/local\/Homebrew\/bin:/}

# gigalixir and other pip3 --user installed tools, per XDG spec
prepend_path PATH $HOME/.local/bin

# add my Scripts bin to PATH
# export PATH=$PATH:~/Scripts
prepend_path PATH $HOME/Scripts

# Add RVM to PATH for scripting
# export PATH=~/.rvm/bin:${PATH/~\/.rvm\/bin:/}

# just for linuxbrew, see: https://github.com/Homebrew/linuxbrew
# if [ "$(uname -s)" == "Linux" ]; then
#   export PATH="$HOME/.linuxbrew/bin:$PATH"
#   export LD_LIBRARY_PATH="$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH"
# fi

# add postgres app install dir to front of PATH
# export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:${PATH/\/Applications\/Postgres\.app\/Contents\/Versions\/9\.6\/bin:/}

# prefer homebrew-installed sqlite to native one
# export PATH="/usr/local/opt/sqlite/bin:$PATH"

# get building of gem capybara-webkit to use qt@5.5's qmake
# export PATH="$(brew --prefix qt@5.5)/bin:$PATH"

# homebrew

# if [ "$PLATFORM" = "linux" ]; then
# disabled because nixos doesn't need this shite
    # prepend_path PATH $HOME/.linuxbrew/bin
    # prepend_path PATH $HOME/.linuxbrew/sbin
    # prepend_path LD_LIBRARY_PATH $HOME/.linuxbrew/lib
# elif
if [ "$PLATFORM" = "osx" ]; then
  prepend_path PATH /opt/homebrew/bin
  prepend_path PATH /opt/homebrew/sbin
  prepend_path PATH /opt/homebrew/opt/curl/bin
  # add homebrew llvm in front of apple llvm
  prepend_path PATH /opt/homebrew/opt/llvm/bin
  # python utils from homebrew, may need to tweak version
  prepend_path PATH /opt/homebrew/opt/python@3.9/libexec/bin
  # GNU utils from homebrew
  prepend_path PATH /opt/homebrew/opt/coreutils/libexec/gnubin
  # I don't know why gnu awk is stored separately?
  prepend_path PATH /opt/homebrew/opt/gawk/libexec/gnubin
fi

# rust/cargo
prepend_path PATH $HOME/.cargo/bin

# Nix
# Prefer Nix stuff to both system and homebrew
if [ "$PLATFORM" = "osx" ]; then
  # idempotent nix config that every macos update seems to need
  # (it checks if it's already been run before and returns if so)
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    source '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi
  # now since it simply added it to the front without checking if it was already in PATH,
  # we have to redo its PATH edits to make sure it's only there once
  prepend_path PATH /nix/var/nix/profiles/default/bin
  prepend_path PATH $HOME/.nix-profile/bin
fi

# BINSTUBS
# add binstub to front of PATH which overrides everything
# aaaand disabled for security and buggy reasons
# prepend_path PATH ./bin

# add my user bin to PATH
# export PATH=$PATH:~/bin
prepend_path PATH $HOME/bin

# echo "PATH after config is $PATH"
