#!/usr/bin/env bash
[[ "$(type -t append_dotfile_progress)" == "function" ]] || . "$HOME/dotfiles/bin/src/append_dotfile_progress.sh"
[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Entering $(echo "${BASH_SOURCE[0]}" | $SED "s|^$HOME|~|")" || $INTERACTIVE_SHELL && $LOGIN_SHELL && append_dotfile_progress "P"
[ -n "${DEBUG_PATHCONFIG}" ] && echo "PATH is: $PATH"

# All path configs here should replace any existing version of themselves in the PATH before appending
# (idempotent)

. "$HOME/dotfiles/bin/src/prepend_path.bash"

# gigalixir and other pip3 --user installed tools, per XDG spec
[ -d $HOME/.local/bin ] && prepend_path $HOME/.local/bin

# add my Scripts bin to PATH
[ -d $HOME/Scripts ] && prepend_path $HOME/Scripts

# rust/cargo
[ -d $HOME/.cargo/bin ] && prepend_path $HOME/.cargo/bin

# LM Studio
[ -d $HOME/.cache/lm-studio/bin ] && prepend_path $HOME/.cache/lm-studio/bin

# where is this garbage in my PATH coming from?
IGNORE_EXCLUDE_PATH_WARNINGS=true exclude_path '~/.dotnet/tools'
exclude_path '/usr/local/share/dotnet'
# exclude_path '/Library/Frameworks/Mono.framework/Versions/Current/Commands' # it keeps reinserting itself??
# A note on the below: https://support.apple.com/guide/deployment/rapid-security-responses-dep93ff7ea78/web
exclude_path '/System/Cryptexes/App/usr/bin' || echo "exclude_path not defined in .pathconfig"
exclude_path '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin' || echo "exclude_path not defined in .pathconfig"
exclude_path '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin' || echo "exclude_path not defined in .pathconfig"
exclude_path '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin' || echo "exclude_path not defined in .pathconfig"

# Nix
# Prefer Nix stuff to both system and homebrew
if [ "$PLATFORM" = "osx" ]; then
  # idempotent nix config that every macos update seems to need
  # (it checks if it's already been run before and returns if so)
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    source '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi
  # now since it simply added it to the front without checking if it was already in PATH,
  # we have to redo its PATH edits to make sure it's only there once
  [ -d /nix/var/nix/profiles/default/bin ] && prepend_path /nix/var/nix/profiles/default/bin
  [ -d $HOME/.nix-profile/bin ] && prepend_path $HOME/.nix-profile/bin
  [ -d /run/current-system/sw/bin ] && prepend_path /run/current-system/sw/bin
fi

# Added by Windsurf
IGNORE_PREPEND_PATH_WARNINGS=true prepend_path "$HOME/.codeium/windsurf/bin"

# BINSTUBS
# add binstub to front of PATH which overrides everything
# aaaand disabled for security and buggy reasons
# prepend_path ./bin

# add my user bin to PATH
# export PATH=$PATH:~/bin
prepend_path $HOME/bin

# include the custom project executables I usually like in PATH
# Due to race condition issues with iCloud backup, on my Mac, my Github projects are in Documents-CloudManaged (alias dcm)
# and not in ~/Documents, which is where they still live on my Linux installs
# if on mac, set DOCUMENTS to $HOME/Documents-CloudManaged, otherwise set it to $HOME/Documents
if [ "$PLATFORM" = "osx" ]; then
  DOCUMENTS="$HOME/Documents-CloudManaged"
else
  DOCUMENTS="$HOME/Documents"
fi
prepend_path "$DOCUMENTS/ixnay"
prepend_path "$DOCUMENTS/jumpscript"
prepend_path "$DOCUMENTS/yt-transcriber"
prepend_path "$DOCUMENTS/baseN"
prepend_path "$DOCUMENTS/printable-binary"

# Now exclude every path from PATH that does not actually exist.
# I don't like this way of doing it, but it was the only way that worked easily.
OLD_IFS=$IFS
IFS=:
for path in $PATH; do
  if [ ! -d "$path" ]; then
    exclude_path "$path"
  fi
done
IFS=$OLD_IFS
unset OLD_IFS

# echo "PATH after config is $PATH"
[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Exiting $(echo "${BASH_SOURCE[0]}" | $SED "s|^$HOME|~|")"
[ -n "${DEBUG_PATHCONFIG}" ] && echo $PATH || :
