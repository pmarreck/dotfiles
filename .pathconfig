$DEBUG_SHELLCONFIG && $INTERACTIVE_SHELL && echo "Running .pathconfig" # || printf "#"
# echo "Current PATH is $PATH"

# All path configs here should replace any existing version of themselves in the PATH before appending
# (idempotent)

# function to prepend paths in an idempotent way
prepend_path() {
  local dir="${1%/}"     # discard trailing slash
  local var="${2:-PATH}"
  if [ -z "$dir" ]; then
    echo "Usage: prepend_path <path_to_prepend> [name_of_path_var]" >&2
    return 2 # incorrect usage return code, may be an informal standard
  fi
  local newvalue=${!var}
  [[ $newvalue =~ ^$dir: ]] && return # quit if value already starts with $dir
  newvalue=${newvalue%:$dir}          # remove $dir from end of path
  newvalue=${newvalue//:$dir:/:}      # remove $dir from middle of path
  # prepend the new entry
  export ${var}="$dir:$newvalue"
}

# Add Python installed scripts to front of PATH
# export PATH=/usr/local/share/python:${PATH/\/usr\/local\/share\/python:/}
# Move /usr/local/bin and /usr/local/sbin to the front of PATH by subbing it out and prepending
# export PATH=/usr/local/sbin:${PATH/\/usr\/local\/sbin:/}
# export PATH=/usr/local/bin:${PATH/\/usr\/local\/bin:/}
## # Move /usr/local/Homebrew/bin and /usr/local/Homebrew/sbin to the front of PATH by subbing it out and prepending
## export PATH=/usr/local/Homebrew/sbin:${PATH/\/usr\/local\/Homebrew\/sbin:/}
## export PATH=/usr/local/Homebrew/bin:${PATH/\/usr\/local\/Homebrew\/bin:/}

# gigalixir and other pip3 --user installed tools, per XDG spec
prepend_path $HOME/.local/bin

# add my Scripts bin to PATH
# export PATH=$PATH:~/Scripts
prepend_path $HOME/Scripts

# Add RVM to PATH for scripting
# export PATH=~/.rvm/bin:${PATH/~\/.rvm\/bin:/}

# just for linuxbrew, see: https://github.com/Homebrew/linuxbrew
# if [ "$(uname -s)" == "Linux" ]; then
#   export PATH="$HOME/.linuxbrew/bin:$PATH"
#   export LD_LIBRARY_PATH="$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH"
# fi

# add postgres app install dir to front of PATH
# export PATH=/Applications/Postgres.app/Contents/Versions/9.6/bin:${PATH/\/Applications\/Postgres\.app\/Contents\/Versions\/9\.6\/bin:/}

# prefer homebrew-installed sqlite to native one
# export PATH="/usr/local/opt/sqlite/bin:$PATH"

# get building of gem capybara-webkit to use qt@5.5's qmake
# export PATH="$(brew --prefix qt@5.5)/bin:$PATH"

# homebrew

# if [ "$PLATFORM" = "linux" ]; then
# disabled because nixos doesn't need this shite
    # prepend_path $HOME/.linuxbrew/bin
    # prepend_path $HOME/.linuxbrew/sbin
    # prepend_path $HOME/.linuxbrew/lib LD_LIBRARY_PATH
# elif
if [ "$PLATFORM" = "osx" ]; then
  prepend_path /opt/homebrew/bin
  prepend_path /opt/homebrew/sbin
  prepend_path /opt/homebrew/opt/curl/bin
  # add homebrew llvm in front of apple llvm
  prepend_path /opt/homebrew/opt/llvm/bin
  # python utils from homebrew, may need to tweak version
  prepend_path /opt/homebrew/opt/python@3.9/libexec/bin
  # GNU utils from homebrew
  prepend_path /opt/homebrew/opt/coreutils/libexec/gnubin
  # I don't know why gnu awk is stored separately?
  prepend_path /opt/homebrew/opt/gawk/libexec/gnubin
fi

# rust/cargo
prepend_path $HOME/.cargo/bin

# Nix
# Prefer Nix stuff to both system and homebrew
if [ "$PLATFORM" = "osx" ]; then
  # idempotent nix config that every macos update seems to need
  # (it checks if it's already been run before and returns if so)
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    source '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi
  # now since it simply added it to the front without checking if it was already in PATH,
  # we have to redo its PATH edits to make sure it's only there once
  prepend_path /nix/var/nix/profiles/default/bin
  prepend_path $HOME/.nix-profile/bin
fi

# BINSTUBS
# add binstub to front of PATH which overrides everything
# aaaand disabled for security and buggy reasons
# prepend_path ./bin

# add my user bin to PATH
# export PATH=$PATH:~/bin
prepend_path $HOME/bin

# echo "PATH after config is $PATH"
