#!/usr/bin/env bash

# Fail if return code isn't 0.
# Parameter 1 is the return code
# Para. 2 is text to display on failure.
check_errs() {
  if [ "${1}" -ne "0" ]; then
    echo "ERROR # ${1} : ${2}"
    if [ -e "$infile.to7z" ] ; then
      mv "$infile.to7z" "$infile"
    fi
    if [ -e "$tmp/$infile" ]; then
      if [ -e "$tmp/${infile%.rar}.rar" ]; then
        mv "$tmp/${infile%.rar}".r?? .
      else
        mv "$tmp/$infile" .
      fi
      rm -rf $tmp
    fi
    exit ${1}
  fi
}

normalize() {
  dir=$1
  dir=$(dirname "$dir")
  pushd "$dir" > /dev/null
  dir=`pwd`
  popd > /dev/null 2>&1
  fname=$(basename "$1")
  echo "$dir/$fname"
}

#Show help and quit.
myhelp() {
  echo "USAGE: to7z wonderland.zip [middle-earth.tar.bzip2]" >&2
  exit 0
}

#Create temp unpack dir
make_unpackdir() {
  unpackdir=$(mktemp -d -t to7z"$$")
  trap "rm -rf '$unpackdir'" EXIT INT HUP TERM
}

# Check for any resource forks in this directory
# Assumes you are already in the working, decompressed directory!
checkForResourceFork() {
  macrsrc=false
  for macfile in $(find .); do
    rsrcNamePath="$macfile/..namedfork/rsrc"
    if [ -f "$rsrcNamePath" -a -s "$rsrcNamePath" ]; then
      macrsrc=true
      break
    fi
  done
  if [ "$macrsrc" = "true" ]; then
    echo "Working files contain at least one resource fork. Tarring first..."
    tar cf "$infile.tar" *
    outfile="${outfile}.tar"
  fi
}

while getopts :h OPTION
do
  case $OPTION in
    h) myhelp
      ;;
    \?) echo "Illegal option -- $OPTARG" >&2
      exit -1
      ;;
  esac
done

if [ "$1" == "" ]; then
  myhelp
fi

will_compress=false

for infile in "$@"
do
  # assume someone can run this script multiple times to ramp up CPU usage :)
  if [ -e "$infile" ]; then
    will_compress=false
    case "$infile" in
      *.zip)
        make_unpackdir
        echo "Processing $infile"
        mv "$infile" "$infile.to7z"
        if [ $? -eq 0 ]; then
          will_compress=true
          # unzip -q "$infile.to7z" -d "$unpackdir" >/dev/null
          ditto -xk "$infile.to7z" "$unpackdir" >/dev/null # this one works properly on OS X
          check_errs $?
          outfile=${infile%.zip}
        fi
        ;;
      *.rar)
        make_unpackdir
        echo "Processing $infile"
        tmp="unrartmp.$$"
        mkdir $tmp
        mv "${infile%.rar}".r?? $tmp/
        if [ $? -eq 0 ]; then
          will_compress=true
          unrar x "$tmp/$infile" "$unpackdir/" >/dev/null
          check_errs $?
          outfile=${infile%.rar}
        fi
        ;;
      *.tgz)
        make_unpackdir
        echo "Processing $infile"
        mv "$infile" "$infile.to7z"
        if [ $? -eq 0 ]; then
          will_compress=true
          tar -C "$unpackdir" -xzf "$infile.to7z" >/dev/null
          check_errs $?
          outfile=${infile%.tgz}
        fi
        ;;
      *.tar.gz)
        make_unpackdir
        echo "Processing $infile"
        mv "$infile" "$infile.to7z"
        if [ $? -eq 0 ]; then
          will_compress=true
          tar -C "$unpackdir" -xzf "$infile.to7z" >/dev/null
          check_errs $?
          outfile=${infile%.tar.gz}
        fi
        ;;
      *.tar)
        make_unpackdir
        echo "Processing $infile"
        mv "$infile" "$infile.to7z"
        if [ $? -eq 0 ]; then
          will_compress=true
          tar -C "$unpackdir" -xf "$infile.to7z" >/dev/null
          check_errs $?
          outfile=${infile%.tar}
        fi
        ;;
      *.tar.bz*2)
        make_unpackdir
        echo "Processing $infile"
        mv "$infile" "$infile.to7z"
        if [ $? -eq 0 ]; then
          will_compress=true
          tar -C "$unpackdir" -xjf "$infile.to7z" >/dev/null
          check_errs $?
          outfile=${infile%.tar.bz*2}
        fi
        ;;
      *.exe|*.bmp|*.pdf|*.key|*.doc|*.xls?|*.iso|*.sparsebundle)
        make_unpackdir
        echo "Processing $infile"
        tmp="tmp7z.$$"
        mkdir $tmp
        mv "$infile" "$tmp/"
        if [ $? -eq 0 ]; then
          will_compress=true
          cp -R "$tmp/$infile" "$unpackdir/"
          check_errs $?
          outfile="$infile"
        else
          mv "$tmp/$infile" .
          rm -r $tmp
        fi
        ;;
      *)
        if [ -d "$infile" ]; then
          echo "$infile is a directory. Skipping for now."
        fi
        # echo "Unrecognized archive format for file $infile" >&2
        will_compress=false
        # exit -1
        ;;
    esac
    if [ "$will_compress" == "true" ]; then
      outfile=$(normalize "$outfile")
      pushd "$unpackdir" >/dev/null
      checkForResourceFork
      outfile="${outfile}.7z"
      echo "Going to write file: $outfile"
      if [ -e "$outfile" ]; then
        echo "Overwriting $outfile" >&2
        rm "$outfile"
        check_errs $?
      fi
      7za a -t7z "$outfile" . -bd -mx=9 -mmt=on >/dev/null
      # zip -r "$outfile" . >/dev/null
      check_errs $?
      popd > /dev/null
      # check for temp pre-convert archives
      if [ -e "$infile.to7z" ]; then
        rm "$infile.to7z"
        check_errs $?
      fi
      # check for unrar temp directories
      if [ -e "$tmp/$infile" ]; then
        rm -rf $tmp
        check_errs $?
      fi
    fi
    if [ -e "$unpackdir" ]; then
      rm -rf "$unpackdir" >/dev/null
    fi
  fi
done