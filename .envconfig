#!/usr/bin/env bash

[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Entering $(echo "${BASH_SOURCE[0]}" | $SED "s|^$HOME|~|")" || $INTERACTIVE_SHELL && $LOGIN_SHELL && append_dotfile_progress "env"
[ -n "${DEBUG_PATHCONFIG}" ] && echo $PATH

# canonical gcc tweaks for OS X's homebrew gcc; Linux shouldn't need these
# if [ "$PLATFORM" = "osx" ]; then
  # needs brew
  # brew_prefix=$(brew --prefix)
  # Homebrew LLVM and compiler toolchain config
  # export LDFLAGS="-L/opt/homebrew/opt/llvm/lib -Wl,-rpath,/opt/homebrew/opt/llvm/lib"
  # export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
  # Experimental "Plan 9 from User Space" PATH config
  # export PLAN9=/usr/local/plan9
  # export PATH=$PATH:$PLAN9/bin
  # gcc_ver="11"
  # brew_prefix_bin=$brew_prefix/bin
  # export CC=$brew_prefix_bin/gcc-$gcc_ver
  # export GCC=$CC
  # export CXX=$brew_prefix_bin/g++-$gcc_ver
  # export CPP=$brew_prefix_bin/cpp-$gcc_ver
  # export LD=$brew_prefix_bin/gcc-$gcc_ver
  # alias c++=$brew_prefix_bin/c++-$gcc_ver
  # alias g++=$brew_prefix_bin/g++-$gcc_ver
  # alias gcc=$brew_prefix_bin/gcc-$gcc_ver
  # alias cpp=$brew_prefix_bin/cpp-$gcc_ver
  # alias ld=$brew_prefix_bin/gcc-$gcc_ver
  # alias cc=$brew_prefix_bin/gcc-$gcc_ver
  # alias clang=$brew_prefix_bin/clang-$gcc_ver
  # alias clang++=$brew_prefix_bin/clang++-$gcc_ver
  # alias gcov=$brew_prefix_bin/gcov-$gcc_ver
  # alias gcov-dump=$brew_prefix_bin/gcov-dump-$gcc_ver
  # alias gcov-tool=$brew_prefix_bin/gcov-tool-$gcc_ver
# fi

# stop checking for unix mail, OS X!
unset MAILCHECK

# Node.js
export NODE_PATH=/usr/local/lib/node

# ANSI color escape-code constants
# On SGR: https://en.wikipedia.org/wiki/ANSI_escape_code#SGR
export ANSI="\e[" # open ANSI escape sequence
export TXT="0;"
export TXT256="38;5;" # 256 color palette
export BLD="1;"
export UND="4;"
export NOUND="24;"
export BLK=30
export RED=31
export GRN=32
export YLW=33
export ORG=208 # 256 color palette orange color
export BLU=34
export MAG=35
export CYN=36
export WHT=37
export DFT=39 # default foreground color
export SGR="m"
export TXTBLK="$TXT$BLK$SGR" # Black - Regular
export TXTRED="$TXT$RED$SGR" # Red
export TXTGRN="$TXT$GRN$SGR" # Green
export TXTYLW="$TXT$YLW$SGR" # Yellow
export TXTORG="$TXT256$ORG$SGR" # Orange... Note, 256 color
export TXTBLU="$TXT$BLU$SGR" # Blue
export TXTMAG="$TXT$MAG$SGR" # Magenta
export TXTCYN="$TXT$CYN$SGR" # Cyan
export TXTWHT="$TXT$WHT$SGR" # White
export TXTDFT="$TXT$DFT$SGR" # Default
export BLDBLK="$BLD$BLK$SGR" # Black - Bold
export BLDRED="$BLD$RED$SGR" # Red
export BLDGRN="$BLD$GRN$SGR" # Green
export BLDYLW="$BLD$YLW$SGR" # Yellow
export BLDBLU="$BLD$BLU$SGR" # Blue
export BLDMAG="$BLD$MAG$SGR" # Magenta
export BLDCYN="$BLD$CYN$SGR" # Cyan
export BLDWHT="$BLD$WHT$SGR" # White
export UNDBLK="$UND$BLK$SGR" # Black - Underline
export UNDRED="$UND$RED$SGR" # Red
export UNDGRN="$UND$GRN$SGR" # Green
export UNDYLW="$UND$YLW$SGR" # Yellow
export UNDBLU="$UND$BLU$SGR" # Blue
export UNDMAG="$UND$MAG$SGR" # Magenta
export UNDCYN="$UND$CYN$SGR" # Cyan
export UNDWHT="$UND$WHT$SGR" # White
export BAKBLK="$(($BLK+10))$SGR" # Black - Background
export BAKRED="$(($RED+10))$SGR" # Red
export BAKGRN="$(($GRN+10))$SGR" # Green
export BAKYLW="$(($YLW+10))$SGR" # Yellow
export BAKBLU="$(($BLU+10))$SGR" # Blue
export BAKMAG="$(($MAG+10))$SGR" # Magenta
export BAKCYN="$(($CYN+10))$SGR" # Cyan
export BAKWHT="$(($WHT+10))$SGR" # White
export BAKDFT="$(($DFT+10))$SGR" # Default
export TXTRST="$SGR"          # Text Reset

# Pager config (ex., for git diff output)
#E=quit at first EOF
#Q=no bell
#R=pass through raw ansi so colors work
#X=no termcap init
#-x2=two spaces per tab
export LESS="-EQRX -x2"

# Color terminals, default to truecolor unless otherwise set
export COLORTERM=${COLORTERM:-truecolor}

# For the great "micro" editor
export MICRO_TRUECOLOR=1

# GPG configuration to set up in-terminal challenge-response
export GPG_TTY=`tty`

# see: https://wezfurlong.org/wezterm/hyperlinks.html
# example: hyperlink http://google.com "this is a test"
hyperlink() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  printf '\e]8;;'
  printf "$1"
  printf '\e\\'
  printf "$2"
  printf '\e]8;;\e\\\n'
}
export -f hyperlink

# alerting in yellow to stderr
note() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  >&2 printf "$ANSI$TXTYLW%s$ANSI$TXTDFT\n" "$@"
}
export -f note

# warning in orange to stderr
warn() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  >&2 printf "$ANSI$TXTORG%s$ANSI$TXTDFT\n" "$@"
}
export -f warn

# error in red to stderr
err() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  >&2 printf "$ANSI$TXTRED%s$ANSI$TXTDFT\n" "$@"
}
export -f err

fail() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  err "$@"
  exit 1
}
export -f fail

# Ruby environment tweaking
# export RUBY_GC_HEAP_INIT_SLOTS=1000000
# export RUBY_HEAP_SLOTS_INCREMENT=1000000
# export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
# export RUBY_GC_MALLOC_LIMIT=100000000
# export RUBY_HEAP_FREE_MIN=500000
# export RUBY_GC_HEAP_FREE_SLOTS=200000

# Locale. Setting it here if it's not set yet solves some issues.
# NOTE: Just set these via direnv : LANG=en_US.UTF-8, LANGUAGE=en_US, LC_CTYPE="en_US.UTF-8"
# export LC_ALL=${LC_ALL:-C}

# IRC hackery
# export IRCNICK="lectrick"
# export IRCUSER="Any"
# export IRCNAME="Peter"
# export IRCSERVER="irc.freenode.net"

# twitter integration with nerves

# export NERVES_SYSTEM=~/Documents/nerves/nerves_system_linkit
# export NERVES_TOOLCHAIN=~/Documents/nerves/nerves-mipsel-unknown-linux-musl-darwin-x86_64-v0.6.3

# prompt for set -x output
export PS4='$0:$LINENO+ '

# shut up, macos, zsh isn't significantly better enough than bash to warrant switching
# (and you only did it because of the licensing difference, anyway)
# (If this is unset on macos, it will keep reminding you to switch to zsh)
if [ "$PLATFORM" = "osx" ]; then
  export BASH_SILENCE_DEPRECATION_WARNING=1
fi

# steam custom proton stuff, but only on linux
if [ "$PLATFORM" = "linux" ]; then
  export STEAM_COMPAT_DATA_PATH="$HOME/.steam/steam/steamapps/compatdata"
  export STEAM_COMPAT_CLIENT_INSTALL_PATH="$HOME/.steam/root"
  export STEAM_EXTRA_COMPAT_TOOLS_PATHS="$HOME/.steam/root/compatibilitytools.d"
fi

# Nix config
IGNORE_EXCLUDE_PATH_WARNINGS=true exclude_path '/nix/var/nix/profiles/per-user/root/channels' NIX_PATH

# Fontconfig
export FONTCONFIG_PATH="${XDG_CONFIG_HOME:-$HOME/.config}/fontconfig"
export FONTCONFIG_FILE="${FONTCONFIG_PATH}/fonts.conf"

# Ollama
export OLLAMA_CONTEXT_LENGTH=16384
export OLLAMA_DEFAULT_MODEL=${OLLAMA_DEFAULT_MODEL:-llama3.3:70b}

# erlang/elixir config- 2 million process limit
# (# of schedulers is automatic to # of CPU logical cores, but can be forced with +S arg)
export ERL_FLAGS="+P 2000000";

# take any $HOME/.secrets and export them
[ -f $HOME/.secrets ] && source $HOME/.secrets
[ -f $HOME/.secrets ] && export $(cat $HOME/.secrets | grep -v -s -e '^\s*#' | cut -d "=" -f 1 | xargs -L 1)

[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Exiting $(echo "${BASH_SOURCE[0]}" | $SED "s|^$HOME|~|")"
[ -n "${DEBUG_PATHCONFIG}" ] && echo $PATH || :
