#!/usr/bin/env luajit

--[[
POSIX-Counter: Atomic Counter using POSIX Shared Memory

A LuaJIT-based atomic counter utility using POSIX shared memory (shm_open/mmap).
This implementation provides cross-process atomic counters but has platform limitations:

‚ö†Ô∏è  SUDO REQUIRED ON MACOS:
   - POSIX shared memory requires elevated privileges on macOS
   - Cross-process access fails without sudo due to permission restrictions
   - This makes it unsuitable as the default counter implementation

‚úÖ PASSES UNIFIED TEST SUITE:
   - All 16 tests pass when run with sudo
   - Fully compatible with the unified counter contract
   - Maintained for completeness and potential future use

üîß TECHNICAL DETAILS:
   - Uses POSIX shm_open/mmap for shared memory
   - Memory-mapped integer with atomic operations
   - Named shared memory objects for inter-process access
   - Standard POSIX APIs for cross-platform compatibility

üìù NOTE: fs-counter is the recommended default implementation as it works
   without sudo privileges using filesystem-based locking in /tmp (RAMdisk).

Usage: sudo posix-counter <action> [key] [value]
Actions: create, inc, dec, set, get, destroy
--]]

local ffi = require("ffi")
local bit = require("bit")

-- POSIX shared memory and mmap functions
ffi.cdef[[
    // Typedefs first
    typedef unsigned int mode_t;
    typedef long off_t;
    typedef unsigned long size_t;

    // File stat structure (simplified)
    struct stat {
        off_t st_size;
        // ... other fields we don't need
    };

    // POSIX shared memory
    int shm_open(const char *name, int oflag, mode_t mode);
    int shm_unlink(const char *name);

    // File operations
    int ftruncate(int fd, off_t length);
    int close(int fd);
    int fstat(int fd, struct stat *buf);

    // Memory mapping
    void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
    int munmap(void *addr, size_t length);

    // Error handling
    char *strerror(int errnum);
    int *__error(void);        // macOS errno location
    int *__errno_location(void); // Linux errno location

    static const int PROT_READ = 0x01;
    static const int PROT_WRITE = 0x02;
    static const int MAP_SHARED = 0x0001;
    static const int MAP_FAILED = -1;
]]

local C = ffi.C

-- Platform-specific open flags; values differ between macOS and Linux
local O_CREAT, O_RDWR, O_EXCL
if ffi.os == "OSX" then
	O_CREAT = 0x0200
	O_RDWR = 0x0002
	O_EXCL = 0x0800
else
	O_CREAT = 0x0040
	O_RDWR = 0x0002
	O_EXCL = 0x0080
end

-- Cross-platform errno access
local function get_errno()
    local success, errno_ptr = pcall(function() return C.__error() end)
    if success then
        return errno_ptr[0]  -- macOS
    else
        -- Try Linux errno location
        local success_linux, errno_ptr_linux = pcall(function() return C.__errno_location() end)
        if success_linux then
            return errno_ptr_linux[0]  -- Linux
        else
            return 1  -- Fallback
        end
    end
end

-- POSIX Counter class
local PosixCounter = {}
PosixCounter.__index = PosixCounter

function PosixCounter:new(name)
    local self = setmetatable({}, PosixCounter)
    self.name = name
    self.shm_name = "/" .. name  -- POSIX shared memory names must start with /
    self.fd = nil
    self.counter_ptr = nil
    self.size = ffi.sizeof("int")
    return self
end

function PosixCounter:create(initial_value)
    initial_value = initial_value or 0

    -- Try to unlink any existing shared memory first
    C.shm_unlink(self.shm_name)  -- Ignore errors

    -- Create new shared memory object with read/write permissions for all
    local mode_all_rw = tonumber("666", 8)
    self.fd = C.shm_open(self.shm_name, bit.bor(O_CREAT, O_RDWR, O_EXCL), mode_all_rw)
    if self.fd == -1 then
        local errno = get_errno()
        error("Failed to create shared memory: " .. ffi.string(C.strerror(errno)))
    end

    -- Set the size
    if C.ftruncate(self.fd, self.size) == -1 then
        local errno = get_errno()
        C.close(self.fd)
        C.shm_unlink(self.shm_name)
        error("Failed to set shared memory size: " .. ffi.string(C.strerror(errno)))
    end

    -- Map the memory
    self.counter_ptr = ffi.cast("int*", C.mmap(nil, self.size,
        bit.bor(C.PROT_READ, C.PROT_WRITE), C.MAP_SHARED, self.fd, 0))

    if ffi.cast("intptr_t", self.counter_ptr) == C.MAP_FAILED then
        local errno = get_errno()
        C.close(self.fd)
        C.shm_unlink(self.shm_name)
        error("Failed to map shared memory: " .. ffi.string(C.strerror(errno)))
    end

    -- Close the file descriptor - the mapping persists independently
    C.close(self.fd)
    self.fd = nil

    -- Initialize the counter
    self.counter_ptr[0] = initial_value

    print("Counter '" .. self.name .. "' created with value " .. initial_value)
end

function PosixCounter:attach()
    if self.counter_ptr then return end -- already attached

    -- Open existing shared memory
    self.fd = C.shm_open(self.shm_name, O_RDWR, 0)
    if self.fd == -1 then
        local errno = get_errno()
        error("Problem accessing shared memory: " .. ffi.string(C.strerror(errno)))
    end

    -- Map the memory
    self.counter_ptr = ffi.cast("int*", C.mmap(nil, self.size,
        bit.bor(C.PROT_READ, C.PROT_WRITE), C.MAP_SHARED, self.fd, 0))

    if ffi.cast("intptr_t", self.counter_ptr) == C.MAP_FAILED then
        local errno = get_errno()
        C.close(self.fd)
        error("Failed to map shared memory: " .. ffi.string(C.strerror(errno)))
    end

    -- Close the file descriptor - the mapping persists independently
    C.close(self.fd)
    self.fd = nil
end

function PosixCounter:get()
    self:attach()
    return self.counter_ptr[0]
end

function PosixCounter:inc()
    self:attach()
    local old_value = self.counter_ptr[0]
    self.counter_ptr[0] = old_value + 1
    return self.counter_ptr[0]
end

function PosixCounter:dec()
    self:attach()
    local old_value = self.counter_ptr[0]
    self.counter_ptr[0] = old_value - 1
    return self.counter_ptr[0]
end

function PosixCounter:set(value)
    if type(value) ~= "number" then
        error("Value must be a number")
    end
    self:attach()
    self.counter_ptr[0] = value
    return value
end

function PosixCounter:destroy(force)
    local destroyed_count = 0

    -- Check if shared memory exists first
    if not force then
        local test_fd = C.shm_open(self.shm_name, O_RDWR, 0)
        if test_fd == -1 then
            -- Counter doesn't exist, print contract-compliant output
            print("0")  -- stdout: count
            io.stderr:write("'" .. self.name .. "' counters destroyed:\n")  -- stderr: message
            os.exit(1)  -- exit code 1 for non-existent
        end
        C.close(test_fd)
    end

    -- Unmap if mapped
    if self.counter_ptr then
        C.munmap(self.counter_ptr, self.size)
        self.counter_ptr = nil
    end

    -- Close file descriptor
    if self.fd then
        C.close(self.fd)
        self.fd = nil
    end

    -- Unlink shared memory
    if C.shm_unlink(self.shm_name) == 0 then
        destroyed_count = 1
        print("1")  -- stdout: count
        io.stderr:write("'" .. self.name .. "' counters destroyed:\n")  -- stderr: message
    elseif not force then
        -- Failed to destroy existing counter
        print("0")  -- stdout: count
        io.stderr:write("'" .. self.name .. "' counters destroyed:\n")  -- stderr: message
        os.exit(1)  -- exit code 1 for failure
    else
        -- Force mode, counter doesn't exist - this is OK
        print("0")  -- stdout: count
        io.stderr:write("'" .. self.name .. "' counters destroyed:\n")  -- stderr: message
        os.exit(0)  -- explicit exit code 0 for force mode
    end

    return destroyed_count
end

-- CLI Interface
local function show_help()
    print([[
posix-counter - POSIX Shared Memory Atomic Counter

‚ö†Ô∏è  REQUIRES SUDO ON MACOS - This implementation requires elevated privileges
    for cross-process shared memory access. Use fs-counter for sudo-free operation.

‚úÖ PASSES UNIFIED TEST SUITE - Fully compatible with counter contract when run with sudo.

Usage: sudo posix-counter <action> [key] [value]

Actions:
  create <key> [initial_value]  Create counter with optional initial value (default: 0)
  inc <key>                     Increment counter atomically, return new value
  dec <key>                     Decrement counter atomically, return new value
  set <key> <value>             Set counter to specific value
  get <key>                     Get current counter value
  destroy <key>                 Destroy counter
  destroy --force <key>         Destroy counter (ignore if doesn't exist)
  destroy -f <key>              Same as --force

Options:
  -h, --help                    Show this help message
  --test                        Run tests
  --about                       Show detailed information

Examples:
  sudo posix-counter create mycounter 10
  sudo posix-counter inc mycounter
  sudo posix-counter get mycounter
  sudo posix-counter destroy mycounter

Note: Consider using 'fs-counter' instead - it provides the same functionality
      without requiring sudo privileges.
]])
end

local function print_about()
    print("Atomic counter using POSIX shared memory")
end

-- Main CLI dispatch
local function main(args)
    if #args == 0 or args[1] == "-h" or args[1] == "--help" then
        show_help()
        return
    end
    
    if args[1] == "--test" then
        -- Run tests from the test file
        os.execute("exec " .. os.getenv("HOME") .. "/dotfiles/bin/test/posix-counter_test")
        return
    end
    
    if args[1] == "--about" then
        print_about()
        return
    end

    local action = args[1]
    local key = args[2]
    local value = args[3]

    if action == "create" then
        if not key then
            io.stderr:write("Usage: posix-counter create <key> [initial_value]\n")
            os.exit(2)
        end
        local initial_value = tonumber(value) or 0
        local counter = PosixCounter:new(key)
        counter:create(initial_value)

    elseif action == "inc" then
        if not key then
            io.stderr:write("Usage: posix-counter inc <key>\n")
            os.exit(2)
        end
        local counter = PosixCounter:new(key)
        local new_value = counter:inc()
        print(new_value)

    elseif action == "dec" then
        if not key then
            io.stderr:write("Usage: posix-counter dec <key>\n")
            os.exit(2)
        end
        local counter = PosixCounter:new(key)
        local new_value = counter:dec()
        print(new_value)

    elseif action == "set" then
        if not key or not value then
            io.stderr:write("Usage: posix-counter set <key> <value>\n")
            os.exit(2)
        end
        local num_value = tonumber(value)
        if not num_value then
            error("Value must be a number")
        end
        local counter = PosixCounter:new(key)
        counter:set(num_value)
        print(num_value)

    elseif action == "get" then
        if not key then
            io.stderr:write("Usage: posix-counter get <key>\n")
            os.exit(2)
        end
        local counter = PosixCounter:new(key)
        local current_value = counter:get()
        print(current_value)

    elseif action == "destroy" then
        local force = false
        local actual_key = key

        -- Handle both orders: --force <key> and <key> --force
        if key == "--force" or key == "-f" then
            force = true
            actual_key = value
        elseif value == "--force" or value == "-f" then
            force = true
            actual_key = key
        end

        if not actual_key then
            io.stderr:write("Usage: posix-counter destroy [--force|-f] <key>\n")
            os.exit(2)
        end

        local counter = PosixCounter:new(actual_key)
        counter:destroy(force)

    else
        io.stderr:write("Unknown action: " .. action .. ". Use -h for help.\n")
        os.exit(2)
    end
end

-- Run if called directly
if arg then
    local success, err = pcall(main, arg)
    if not success then
        io.stderr:write("Error: " .. err .. "\n")
        os.exit(1)
    end
end
