#!/usr/bin/env bash

source $HOME/dotfiles/bin/expand

test_expand() {
  local fails=0
  local tests=0
  local output

  # Create test files in temp dir
  pushd $(mktemp -d) >/dev/null
  touch test1.jpg test2.jpg "test with spaces.jpg" zzlast.jpg aafirst.jpg

  # Test 1: Direct pattern expansion
  (( tests++ ))
  output=$(expand "test*.jpg" 2>/dev/null)
  # Expected output is the sorted list of files
  local expected_files="test\\ with\\ spaces.jpg test1.jpg test2.jpg "
  assert "$output" == "$expected_files" "expand should expand glob patterns correctly"
  (( fails += $? ))

  # Test 2: Command with pattern
  (( tests++ ))
  output=$(expand echo "test*.jpg" 2>/dev/null)
  # Expected output is the sorted list of files
  expected_files="test with spaces.jpg test1.jpg test2.jpg"
  assert "$output" == "$expected_files" "expand should execute commands with expanded arguments"
  (( fails += $? ))

  # Test 3: Command with multiple patterns
  (( tests++ ))
  # For this test, we expect test1.jpg to appear twice, once from direct arg and once from expansion
  output=$(expand echo "test1.jpg" "test*.jpg" 2>/dev/null)
  # Expected output is the sorted list of files with test1.jpg appearing twice
  expected_files="test with spaces.jpg test1.jpg test1.jpg test2.jpg"
  assert "$output" == "$expected_files" "expand should handle multiple arguments correctly"
  (( fails += $? ))

  # Test 4: Pattern with spaces
  (( tests++ ))
  output=$(expand "test with*.jpg" 2>/dev/null)
  assert "$output" == "test\\ with\\ spaces.jpg " "expand should handle patterns with spaces"
  (( fails += $? ))

  # Test 5: Non-matching pattern
  (( tests++ ))
  output=$(expand "nonexistent*.jpg" 2>/dev/null)
  assert "$output" == "nonexistent\*.jpg " "expand should return the original pattern when no matches are found"
  (( fails += $? ))

  # Test 6: Command with non-matching pattern
  (( tests++ ))
  output=$(expand echo "nonexistent*.jpg" 2>/dev/null)
  assert "$output" == "nonexistent*.jpg" "expand should pass non-matching patterns as-is to commands"
  (( fails += $? ))

  # Test 7: Command with options
  (( tests++ ))
  output=$(expand echo -n "test*.jpg" 2>/dev/null)
  # The -n option should be passed through
  expected_files="test with spaces.jpg test1.jpg test2.jpg"
  assert "$output" == "$expected_files" "expand should pass options to commands"
  (( fails += $? ))

  # Test 8: Verify sorting order with diverse filenames
  (( tests++ ))
  output=$(expand "*.jpg" 2>/dev/null)
  expected_files="aafirst.jpg test\\ with\\ spaces.jpg test1.jpg test2.jpg zzlast.jpg "
  assert "$output" == "$expected_files" "expand should sort filenames correctly"
  (( fails += $? ))

  # Test 9: Sorting with multiple patterns
  (( tests++ ))
  output=$(expand echo "a*.jpg" "t*.jpg" "z*.jpg" 2>/dev/null)
  expected_files="aafirst.jpg test with spaces.jpg test1.jpg test2.jpg zzlast.jpg"
  assert "$output" == "$expected_files" "expand should handle multiple patterns and sort correctly"
  (( fails += $? ))

  # Clean up test files and leave temp dir
  rm -f test1.jpg test2.jpg "test with spaces.jpg" zzlast.jpg aafirst.jpg
  popd >/dev/null

  # Final summary
  if [ $fails -gt 0 ]; then
    red_text "$fails of $tests expand tests failed!\n" >&2
  else
    green_text "All $tests expand tests passed!\n" >&2
  fi
  return $fails
}

# Run the test if this script is executed directly
if ! (return 0 2>/dev/null); then
  test_expand
fi
