#!/usr/bin/env bash

# Test file for the expand function

test_expand() {
  local verbose=${EXPAND_TEST_VERBOSE:-false}
  local fail_count=0
  local test_name=""
  local expected=""
  local actual=""

  # Helper function to run a test and check the result
  _run_test() {
    test_name="$1"
    expected="$2"
    shift 2

    if $verbose; then
      echo -n "Running test: $test_name... "
    fi

    # Capture the actual output
    actual=$("$@")

    # Compare with expected output
    if [[ "$actual" == "$expected" ]]; then
      if $verbose; then
        green_text "PASS"
        echo
      fi
    else
      # Always show failures, even in non-verbose mode
      red_text "FAIL: $test_name"
      echo
      red_text "  Expected: '$expected'"
      echo
      red_text "  Actual:   '$actual'"
      echo
      ((fail_count++))
    fi
  }

  # Create test files
  touch test1.jpg test2.jpg "test with spaces.jpg"

  # Test 1: Direct pattern expansion
  _run_test "Direct pattern expansion" \
    "test1.jpg test2.jpg test\\ with\\ spaces.jpg " \
    expand "test*.jpg"

  # Test 2: Command with pattern
  _run_test "Command with pattern" \
    "test2.jpg test with spaces.jpg test1.jpg" \
    expand echo "test*.jpg"

  # Test 3: Command with multiple patterns
  _run_test "Command with multiple patterns" \
    "test1.jpg test2.jpg test with spaces.jpg test1.jpg" \
    expand echo "test1.jpg" "test*.jpg"

  # Test 4: Pattern with spaces
  _run_test "Pattern with spaces" \
    "test\\ with\\ spaces.jpg " \
    expand "test with*.jpg"

  # Test 5: Non-matching pattern
  _run_test "Non-matching pattern" \
    "nonexistent\\*.jpg " \
    expand "nonexistent*.jpg"

  # Test 6: Command with non-matching pattern
  _run_test "Command with non-matching pattern" \
    "nonexistent*.jpg" \
    expand echo "nonexistent*.jpg"

  # Clean up test files
  rm test1.jpg test2.jpg "test with spaces.jpg"

  # Final summary
  if $verbose || [[ $fail_count -gt 0 ]]; then
    echo ""
    if [[ $fail_count -eq 0 ]]; then
      green_text "All tests passed successfully!"
      echo
    else
      red_text "$fail_count test(s) failed."
      echo
    fi
  fi

  return $fail_count
}

# Run the test in verbose mode if this script is executed directly
if ! (return 0 2>$NULL); then
  EXPAND_TEST_VERBOSE=true test_expand
fi
