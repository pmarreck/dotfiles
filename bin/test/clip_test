#!/usr/bin/env bash

# Enable extensive debugging
# set -x
# set -v
# export DEBUG=1

source $HOME/bin/assert
source $HOME/dotfiles/bin/src/truthy.sh

test_clip() {
	# Check if clipboard is available and working
	local clipboard_available=false
	local os_type="$(uname -s)"
	
	case "$os_type" in
		Darwin)
			if command -v pbcopy >/dev/null 2>&1; then
				clipboard_available=true
			fi
			;;
		Linux)
			if command -v xclip >/dev/null 2>&1 && timeout 1s xclip -version >/dev/null 2>&1; then
				clipboard_available=true
			elif command -v wl-copy >/dev/null 2>&1; then
				clipboard_available=true
			fi
			;;
	esac
	
	if ! $clipboard_available; then
		echo "Skipping clip tests: No working clipboard found for $os_type"
		return 0
	fi
	
	# Save original clipboard content BEFORE any clipboard operations
	local original_clipboard_file=$(mktemp -t clip_original_$$_XXXXXX)
	timeout 1s clip > "$original_clipboard_file" 2>/dev/null || true
	local original_clipboard_content=$(cat "$original_clipboard_file")
	
	# Quick clipboard functionality test with short timeout
	echo "Testing clipboard functionality..."
	if ! timeout 2s bash -c 'echo "test" | clip >/dev/null && [ "$(clip)" = "test" ]' 2>/dev/null; then
		echo "Skipping clip tests: Clipboard not responding within 2 seconds"
		# Clean up the original clipboard file before returning
		rm "$original_clipboard_file"
		return 0
	fi

	# Debug function
	# Fallback definition for func_defined if not available
	type func_defined >/dev/null 2>&1 || func_defined() { declare -F "$1" >/dev/null; }
	func_defined debug || \
	debug() {
		if truthy DEBUG; then
			echo "DEBUG is truthy; its value is '$DEBUG'"
			echo -e "\033[33mDEBUG: $*\033[0m" >&2
		fi
	}
	
	local fails=0
	local tests=0
	local test_string="Test clip function"
	local this_test=""
	local output
	local verbose=$(truthy VERBOSE && echo "true" || echo "false")
	export TMPDIR="/tmp"
	local temptestfile=$(mktemp -t clip_test_$$_XXXXXX)
	debug "Temp file: $temptestfile"
	export clipboard_file=$(mktemp -t clip_$$_XXXXXX)
	debug "Clipboard file: $clipboard_file"
	debug "Original clipboard content captured: '$original_clipboard_content'"
	
	# Timing function for diagnostics
	time_operation() {
		local operation_name="$1"
		shift
		local start_time=$(date +%s.%N)
		"$@"
		local exit_code=$?
		local end_time=$(date +%s.%N)
		local duration=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "unknown")
		debug "$operation_name took ${duration}s"
		return $exit_code
	}

	# Test 1: `echo hi | clip` should copy "hi" to clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="echo hi | clip should copy 'hi' to clipboard"
	$verbose && echo "TEST: $this_test"
	echo "hi" | clip >/dev/null
	assert "$(clip)" == "hi" "$this_test"
	(( fails += $? ))

	# Test 2: `clip --clear` should clear clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --clear should clear clipboard"
	$verbose && echo "TEST: $this_test"
	debug "About to clear clipboard"
	clip --clear >/dev/null
	debug "About to read clipboard result"
	local result="$(clip)"
	debug "Got result: '$result'"
	debug "About to assert result"
	assert "$result" == "" "$this_test"
	(( fails += $? ))
	debug "Finished assertion"

	# Test 3: Copying from args
	(( tests++ ))
	debug "Test $tests"
	this_test="clip should copy to clipboard from args and return the same string"
	$verbose && echo "TEST: $this_test"
	clip "test" >/dev/null
	assert "$(clip)" == "test" "$this_test"
	(( fails += $? ))

	# Test 4: --save and --restore should preserve clipboard content
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --save and --restore should preserve clipboard content"
	$verbose && echo "TEST: $this_test"
	clip "save test content" >/dev/null
	clip --save >/dev/null
	clip "different content" >/dev/null
	clip --restore >/dev/null
	assert "$(clip)" == "save test content" "$this_test"
	(( fails += $? ))

	# Test 5: Piping to clip - should output to stdout and copy to clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="clip should output to stdout when piped to"
	$verbose && echo "TEST: $this_test"
	output=$(echo -n "$test_string" | clip)  # Put test string in clipboard
	assert "$output" == "$test_string" "$this_test"
	(( fails += $? ))

	# Test 6: Reading from clipboard - should match what we just put in
	(( tests++ ))
	debug "Test $tests"
	this_test="clip should retrieve from clipboard when not piped to"
	$verbose && echo "TEST: $this_test"
	assert "$(clip)" == "$test_string" "$this_test"
	(( fails += $? ))

	# Test 7: Empty clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="clip should return empty string when clipboard is empty"
	$verbose && echo "TEST: $this_test"
	clip --clear
	assert "$(clip)" == "" "$this_test"
	(( fails += $? ))

	# Test 8: Multiple args should be echoed as-is after copying
	(( tests++ ))
	debug "Test $tests"
	this_test="clip should copy multiple args to clipboard and echo them as-is"
	$verbose && echo "TEST: $this_test"
	clip "foo" "bar" >/dev/null
	assert "$(clip)" == "foo bar" "$this_test"
	(( fails += $? ))

	# Test 9: --quiet option should suppress output
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --quiet should not output anything"
	$verbose && echo "TEST: $this_test"
	debug "About to call clip --quiet"
	# For some reason, trying to capture the output of $(clip --quiet "silence") into a variable would invariably hang.
	# Interesting problem, no time to run it down, so just redirect to a tmp file as a workaround.
	clip --quiet "silence" > "$temptestfile"
	output=$(cat "$temptestfile")
	debug "Finished clip --quiet 'silence' and about to assert equality of '$output' with ''"
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 10: --quiet option should still copy to clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --quiet should still copy to clipboard"
	$verbose && echo "TEST: $this_test"
	clip --quiet "quiet test" >/dev/null
	assert "$(clip)" == "quiet test" "$this_test"
	(( fails += $? ))

	# Test 11: -q short option should work the same as --quiet
	(( tests++ ))
	debug "Test $tests"
	this_test="clip -q should not output anything (short option)"
	$verbose && echo "TEST: $this_test"
	debug "About to call clip -q"
	clip -q "short quiet" > "$temptestfile"
	output=$(cat "$temptestfile")
	debug "Finished clip -q 'short quiet' and about to assert equality of '$output' with ''"
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 12: --quiet with piped input should suppress output
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --quiet should not output anything with piped input"
	$verbose && echo "TEST: $this_test"
	output=$(echo -n "piped quiet" | clip --quiet)
	debug "Finished clip --quiet 'piped quiet' and about to assert equality of '$output' with ''"
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 13: --quiet with piped input should still copy to clipboard
	(( tests++ ))
	debug "Test $tests"
	this_test="clip -q should still copy piped input to clipboard"
	$verbose && echo "TEST: $this_test"
	echo -n "piped quiet test" | clip -q >/dev/null
	assert "$(clip)" == "piped quiet test" "$this_test"
	(( fails += $? ))

	# Test 14: --help should show usage
	(( tests++ ))
	debug "Test $tests"
	this_test="clip --help should show usage information"
	$verbose && echo "TEST: $this_test"
	output=$(clip --help | head -n 1)
	assert "$output" == "Usage: clip [OPTIONS] [TEXT...]" "$this_test"
	(( fails += $? ))

	# Test 15: -h short option should show usage
	(( tests++ ))
	debug "Test $tests"
	this_test="clip -h should show usage information"
	$verbose && echo "TEST: $this_test"
	output=$(clip -h | head -n 1)
	assert "$output" == "Usage: clip [OPTIONS] [TEXT...]" "$this_test"
	(( fails += $? ))

	# Restore original clipboard content (always counts as a test, even if originally empty)
	(( tests++ ))
	debug "Test $tests"
	if [ -n "$original_clipboard_content" ]; then
		this_test="Restoring original clipboard content: '$original_clipboard_content'"
		$verbose && echo "TEST: $this_test"
		debug "About to restore clipboard content: '$original_clipboard_content'"
		printf "%s" "$original_clipboard_content" | clip >/dev/null 2>&1 || true
	else
		this_test="Restoring original clipboard content (was empty)"
		$verbose && echo "TEST: $this_test"
		debug "About to restore clipboard content: (empty)"
		clip --clear >/dev/null 2>&1 || true
	fi
	# Verify restoration using file redirection to avoid command substitution hang
	clip > "$temptestfile" 2>/dev/null || true
	local restored_content=$(cat "$temptestfile")
	assert "$restored_content" == "$original_clipboard_content" "$this_test"
	(( fails += $? ))

	# Clean up temp files
	rm "$temptestfile"
	rm "$original_clipboard_file"

	if [ $fails -gt 0 ]; then
		red_text "$fails of $tests clip tests failed!\n"
	else
		green_text "All $tests clip tests passed!\n"
	fi
	return $fails
}

# Run the test if this script is executed directly
if ! (return 0 2>/dev/null); then
  test_clip
fi
