#!/usr/bin/env bash

# Enable extensive debugging
# set -x
# set -v
# export DEBUG=1

source $HOME/dotfiles/bin/clip
source $HOME/bin/assert
source $HOME/dotfiles/bin/src/truthy.sh

test_clip() {
	local fails=0
	local tests=0
	local test_string="Test clip function"
	local this_test=""
	local output
	local verbose=$(truthy VERBOSE && echo "true" || echo "false")
	
	# Debug function
	debug() {
		if truthy DEBUG; then
			echo -e "\033[33mDEBUG: $*\033[0m" &>2
		fi
	}
	
	# Helper function to ensure clean test state
	clean_test_state() {
		# Use clipboard commands directly to avoid any recursion issues
		if succeeds type pbcopy; then
			echo -n "" | pbcopy 2>/dev/null || true
		elif succeeds type wl-copy; then
			wl-copy --clear 2>/dev/null || true
		elif succeeds type xclip; then
			echo -n "" | timeout 2s xclip -selection clipboard 2>/dev/null || true
		fi
	}
	
	
	echo "Testing with actual clipboard"
	debug "Starting test initialization"

	# Initialization- Store and clear the clipboard
	local original_clipboard_content
	debug "About to save existing clipboard content"
	
	# Use the paste command directly to avoid stdin issues
	debug "About to check clipboard commands"
	if succeeds type pbpaste; then
		debug "Found pbpaste, using it"
		original_clipboard_content=$(pbpaste 2>/dev/null || true)
		debug "Got clipboard content: '$original_clipboard_content'"
	elif succeeds type wl-paste; then
		debug "Found wl-paste, using it"
		original_clipboard_content=$(wl-paste 2>/dev/null || true)
		debug "Got clipboard content: '$original_clipboard_content'"
	elif succeeds type xclip; then
		debug "Found xclip, using it"
		original_clipboard_content=$(xclip -o -selection clipboard 2>/dev/null || true)
		debug "Got clipboard content: '$original_clipboard_content'"
	fi
	debug "Finished getting clipboard content"
	
	debug "About to clear clipboard for tests"
	clean_test_state
	debug "Finished initialization"

	# Test 1: --clear should clear clipboard
	(( tests++ ))
	this_test="clip --clear should clear clipboard"
	debug "Starting test 1: $this_test"
	$verbose && echo "TEST: $this_test"
	clean_test_state
	debug "About to set test content"
	clip "test content for clearing" >/dev/null
	debug "About to clear clipboard"
	clip --clear >/dev/null
	debug "About to read clipboard result"
	local result="$(clip)"
	debug "Got result: '$result'"
	debug "About to assert result"
	assert "$result" == "" "$this_test"
	debug "Finished assertion"
	(( fails += $? ))
	clean_test_state

	# Test 2: Copying from args
	(( tests++ ))
	this_test="clip should copy to clipboard from args and return the same string"
	$verbose && echo "TEST: $this_test"
	clean_test_state
	clip "test" >/dev/null
	assert "$(clip)" == "test" "$this_test"
	(( fails += $? ))
	clean_test_state

	# Test 3: --save and --restore should preserve clipboard content
	(( tests++ ))
	this_test="clip --save and --restore should preserve clipboard content"
	$verbose && echo "TEST: $this_test"
	clean_test_state
	clip "save test content" >/dev/null
	clip --save >/dev/null
	clean_test_state
	clip "different content" >/dev/null
	clip --restore >/dev/null
	assert "$(clip)" == "save test content" "$this_test"
	(( fails += $? ))
	clean_test_state

	# Test 4: Piping to clip - should output to stdout and copy to clipboard
	(( tests++ ))
	this_test="clip should output to stdout when piped to"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	output=$(echo -n "$test_string" | clip)  # Put test string in clipboard
	assert "$output" == "$test_string" "$this_test"
	(( fails += $? ))

	# Test 5: Reading from clipboard - should match what we just put in
	(( tests++ ))
	this_test="clip should retrieve from clipboard when not piped to"
	$verbose && echo "TEST: $this_test"
	assert "$(clip)" == "$test_string" "$this_test"
	(( fails += $? ))
	clean_test_state  # Clear after test

	# Test 6: Empty clipboard
	(( tests++ ))
	this_test="clip should return empty string when clipboard is empty"
	$verbose && echo "TEST: $this_test"
	clip --clear
	assert "$(clip)" == "" "$this_test"
	(( fails += $? ))

	# Test 7: Multiple args should be echoed as-is after copying
	(( tests++ ))
	this_test="clip should copy multiple args to clipboard and echo them as-is"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	clip "foo" "bar" >/dev/null
	assert "$(clip)" == "foo bar" "$this_test"
	(( fails += $? ))
	clean_test_state  # Clear after test

	# Test 8: --quiet option should suppress output
	(( tests++ ))
	this_test="clip -q should not output anything"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	output=$(clip -q "silent test")
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 9: --quiet option should still copy to clipboard
	(( tests++ ))
	this_test="clip -q should still copy to clipboard"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	clip -q "quiet test" >/dev/null
	assert "$(clip)" == "quiet test" "$this_test"
	(( fails += $? ))

	# Test 10: -q short option should work the same as --quiet
	(( tests++ ))
	this_test="clip -q should not output anything (short option)"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	output=$(clip -q "short quiet")
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 11: --quiet with piped input should suppress output
	(( tests++ ))
	this_test="clip -q should not output anything with piped input"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	output=$(echo -n "piped quiet" | clip -q)
	assert "$output" == "" "$this_test"
	(( fails += $? ))

	# Test 12: --quiet with piped input should still copy to clipboard
	(( tests++ ))
	this_test="clip -q should still copy piped input to clipboard"
	$verbose && echo "TEST: $this_test"
	clean_test_state  # Clear clipboard first
	echo -n "piped quiet test" | clip -q >/dev/null
	assert "$(clip)" == "piped quiet test" "$this_test"
	(( fails += $? ))

	# Test 13: --help should show usage
	(( tests++ ))
	this_test="clip --help should show usage information"
	$verbose && echo "TEST: $this_test"
	output=$(clip --help | head -n 1)
	assert "$output" == "Usage: clip [OPTIONS] [TEXT...]" "$this_test"
	(( fails += $? ))

	# Test 14: -h short option should show usage
	(( tests++ ))
	this_test="clip -h should show usage information"
	$verbose && echo "TEST: $this_test"
	output=$(clip -h | head -n 1)
	assert "$output" == "Usage: clip [OPTIONS] [TEXT...]" "$this_test"
	(( fails += $? ))


	# Restore original clipboard
	$verbose && echo "Restoring original clipboard content"
	if [ -n "$original_clipboard_content" ]; then
		clip "$original_clipboard_content" >/dev/null
	else
		clip --clear
	fi

	if [ $fails -gt 0 ]; then
		red_text "$fails of $tests clip tests failed!\n"
	else
		green_text "All $tests clip tests passed!\n"
	fi
	return $fails
}

# Run the test if this script is executed directly
if ! (return 0 2>/dev/null); then
  test_clip
fi
