-- This Lua file was automatically generated from tmux-quickref
-- Do not edit this file directly; modify the source file instead

local ansi = {
	orange = "\27[38;5;208m",
	blue = "\27[34m",
	dim = "\27[2m",
	italic = "\27[3m",
	reset = "\27[0m"
}
local keyword_order = {
	"bind-key",
	"bind",
	"set-window-option",
	"set-option",
	"setw",
	"set"
}
local keyword_set = { }
for _index_0 = 1, #keyword_order do
	local word = keyword_order[_index_0]
	keyword_set[word] = true
end
local word_pattern = "[a-z][a-z0-9]*%-[a-z][a-z0-9%-]*"
local escape_pattern
escape_pattern = function(word)
	return word:gsub("%-", "%%-")
end
local read_lines
read_lines = function(path)
	local lines = { }
	local file = io.open(path, "r")
	if not file then
		return lines
	end
	for line in file:lines() do
		table.insert(lines, line)
	end
	file:close()
	return lines
end
local split_code_comment
split_code_comment = function(line)
	local in_single = false
	local in_double = false
	local i = 1
	local len = #line
	while i <= len do
		local ch = line:sub(i, i)
		if ch == "'" and not in_double then
			in_single = not in_single
		elseif ch == '"' and not in_single then
			local prev
			if i > 1 then
				prev = line:sub(i - 1, i - 1)
			else
				prev = nil
			end
			if not prev or prev ~= "\\" then
				in_double = not in_double
			end
		elseif ch == "#" and not in_single and not in_double then
			return line:sub(1, i - 1), line:sub(i)
		end
		if ch == "\\" and in_double then
			i = i + 1
		end
		i = i + 1
	end
	return line, ""
end
local collect_words
collect_words = function(code, set)
	for word in code:gmatch(word_pattern) do
		set[word] = true
	end
end
local highlight_keywords
highlight_keywords = function(code)
	for _index_0 = 1, #keyword_order do
		local word = keyword_order[_index_0]
		local pattern = "^(%s*)" .. escape_pattern(word)
		code = code:gsub(pattern, function(indent)
			return indent .. ansi.orange .. word .. ansi.reset
		end)
	end
	return code
end
local highlight_hyphen_words
highlight_hyphen_words = function(code)
	return code:gsub(word_pattern, function(word)
		if keyword_set[word] then
			return word
		end
		return ansi.blue .. word .. ansi.reset
	end)
end
local colorize_parts
colorize_parts = function(code, comment)
	if code:match("^%s*$") then
		local colored = code
	elseif code:match("^%s*unbind") then
		local colored = ansi.dim .. code .. ansi.reset
	else
		local colored = highlight_keywords(code)
		colored = highlight_hyphen_words(colored)
	end
	local color_comment = ""
	if comment ~= "" then
		color_comment = ansi.dim .. ansi.italic .. comment .. ansi.reset
	end
	return colored .. color_comment
end
local dim_italic
dim_italic = function(text)
	return ansi.dim .. ansi.italic .. text .. ansi.reset
end
local read_list_keys_lines
read_list_keys_lines = function()
	local override = os.getenv("TMUX_QUICKREF_LIST_KEYS_SOURCE")
	if override and #override > 0 then
		return read_lines(override)
	end
	local handle = io.popen("tmux list-keys 2>/dev/null")
	if not handle then
		return { }
	end
	local lines = { }
	for line in handle:lines() do
		table.insert(lines, line)
	end
	handle:close()
	return lines
end
local process_lines
process_lines = function(lines, present, out)
	for _index_0 = 1, #lines do
		local line = lines[_index_0]
		local code, comment = split_code_comment(line)
		collect_words(code, present)
		table.insert(out, colorize_parts(code, comment))
	end
end
local append_defaults
append_defaults = function(present, out)
	local list_lines = read_list_keys_lines()
	local additional = { }
	for _index_0 = 1, #list_lines do
		local line = list_lines[_index_0]
		local code, comment = split_code_comment(line)
		local new_word = false
		for word in code:gmatch(word_pattern) do
			if not present[word] then
				present[word] = true
				new_word = true
			end
		end
		if new_word then
			table.insert(additional, line .. " # default")
		end
	end
	if #additional > 0 then
		table.insert(out, "")
		table.insert(out, dim_italic("# additional defaults from tmux list-keys"))
		for _index_0 = 1, #additional do
			local line = additional[_index_0]
			local code, comment = split_code_comment(line)
			table.insert(out, colorize_parts(code, comment))
		end
	end
end
local render_quickref
render_quickref = function()
	local config_path = os.getenv("TMUX_QUICKREF_CONF") or (os.getenv("HOME") .. "/.config/tmux/tmux.conf")
	local config_lines = read_lines(config_path)
	local present = { }
	local output = {
		"Tmux Quick Reference",
		"===================="
	}
	if #config_lines > 0 then
		table.insert(output, dim_italic("# from " .. config_path))
		process_lines(config_lines, present, output)
	else
		table.insert(output, dim_italic("(no tmux config found at " .. config_path .. ")"))
	end
	append_defaults(present, output)
	return print(table.concat(output, "\n"))
end
local main
main = function()
	local arg1
	if type(arg) == "table" then
		arg1 = arg[1]
	else
		arg1 = nil
	end
	if arg1 == "--help" or arg1 == "-h" then
		return print([[Usage: tmux-quickref [--help] [--test]

Generate a tmux quick reference using your ~/.config/tmux/tmux.conf and
selected defaults gleaned from `tmux list-keys`.

Environment overrides:
  TMUX_QUICKREF_CONF              Path to tmux configuration file to inspect
  TMUX_QUICKREF_LIST_KEYS_SOURCE  File containing `tmux list-keys` output]])
	elseif arg1 == "--test" then
		local test_script = os.getenv("HOME") .. "/dotfiles/bin/test/tmux-quickref_test"
		local handle = io.open(test_script, "r")
		if handle then
			handle:close()
		else
			io.stderr:write("Error: missing test script at " .. test_script .. "\n")
			os.exit(1)
		end
		return os.execute(test_script .. " >/dev/null")
	else
		return render_quickref()
	end
end
return main()
