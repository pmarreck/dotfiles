#!/usr/bin/env bash

# Do simple math in the shell
# Example: calc 2+2
# Note that 'calc 4 * 23' will work fine since globbing is turned off
# For more complex operations: calc "define fac(x) { if (x == 0) return (1); return (fac(x-1) * x); }; fac(5)"

# Check if bc is available
if ! command -v bc >/dev/null 2>&1; then
	echo "Error: bc is not installed; can't use calc function." >&2
	exit 1
fi

calc() {
	local scale=${SCALE:-10}
	local old_bcll
	[[ -n "${BC_LINE_LENGTH}" ]] && old_bcll=$BC_LINE_LENGTH
	export BC_LINE_LENGTH=${BC_LINE_LENGTH:-0}

	# Initialize bcscript
	local bcscript=""

	# Try to read from stdin if available
	if read -t 0; then
		read -d '' -r bcscript
	else
		if [[ $# > 0 ]]; then
			# Join all arguments with spaces to handle operators properly
			bcscript="$*"
		else
			read -d '' -r bcscript # last resort, just try stdin again
		fi
	fi

	# Trim leading and trailing whitespace
	bcscript="${bcscript##+([[:space:]])}"

	# Check if input is empty
	if [[ -z "$bcscript" ]]; then
		echo "Error: calc's input looks blank." >&2
		return 1
	fi

	# Format function definitions per bc requirements
	# bc *requires* a newline after an open brace, but it *doesn't* require a newline before a close brace
	# Replace all newlines with spaces, then replace all spaces after an open brace with a newline
	bcscript=$(echo -e "$bcscript" | sed -e 's/\n+/ /g' -e 's/{\s*/{\n/g' -e 's/} *;?/}\n/g' -e 's/;/\n/g')

	# Debug output if DEBUG is set
	[ -n "$DEBUG" ] && echo -e "string received by calc:\n'$bcscript'" >&2

	# Debug output
	# echo "DEBUG: Final bcscript: '$bcscript'" >&2
	# echo "DEBUG: Command: echo -e \"scale=${scale}\n$bcscript\" | bc -l" >&2

	# Run the calculation
	echo -e "scale=${scale}\n$bcscript" | bc -l
	local retcode=$?

	# Restore BC_LINE_LENGTH
	if [[ "$old_bcll" != '' ]]; then # it was set before and its old value is that
		BC_LINE_LENGTH=$old_bcll
	else
		unset BC_LINE_LENGTH # it wasn't originally set, so unset it now
	fi

	return $retcode
}
# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	debug "Running calc with args: $@"
	case "$1" in
		-h|--help)
			echo "calc - Do simple math in the shell"
			echo "Usage: calc <expression>"
			echo "Examples:"
			echo "  calc 2+2"
			echo "  calc 4 * 23"
			echo "  calc 'define fac(x) { if (x == 0) return (1); return (fac(x-1) * x); }; fac(5)'"
			echo "  echo 'sqrt(16)' | calc"
			echo ""
			echo "Options:"
			echo "  -h, --help    Show this help message"
			echo "  -a, --about   Show brief description"
			echo "  --test        Run tests"
			exit 0
			;;
		-a|--about)
			echo "Do simple math calculations in the shell using bc"
			exit 0
			;;
		--test)
			debug "Running tests for calc with args: $@"
			# Run tests from the test file
			exec "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
			;;
		*)
			# If called directly, pass all arguments to the function
			debug "Running calc function with args: $@"
			$(basename "${0##\-}") "$@"
			;;
	esac
fi
