#!/usr/bin/env bash

# Generate AI-powered git commit messages based on the diff
git_commit_ai() {
	if [[ -z "$OPENAI_API_KEY" ]]; then
		echo "OPENAI_API_KEY is not defined." >&2
		return 1
	fi

	local model request response timeout diff temp_json temp_json_out commit_message http_status \
		openai_host openai_path openai_protocol openai_url local_llm \
		top_k top_p temperature system_prompt user_prompt repeat_penalty num_ctx
	diff=$(git diff)
	if [[ -z "$diff" ]]; then
		diff=$(git diff --cached)
	fi
	if [[ -z "$diff" ]]; then
		echo "No changes to commit." >&2
		return 1
	fi

	model=${OPENAI_MODEL:-gpt-5-mini}
	timeout=${OPENAI_TIMEOUT:-1200}
	openai_host=${OPENAI_HOST:-api.openai.com}
	openai_path=${OPENAI_PATH:-/v1/chat/completions}
	openai_protocol=${OPENAI_PROTOCOL:-https}
	openai_url=${OPENAI_URL:-${openai_protocol}://${openai_host}${openai_path}}
	top_k=${TOP_K:-40}
	top_p=${TOP_P:-0.9}
	repeat_penalty=${REPEAT_PENALTY:-1.1}
	temperature=${TEMPERATURE:-1}
	num_ctx=${NUM_CTX:-32000}
	temp_json=$(mktemp -t git_commit_ai.XXXXXX --tmpdir)
	temp_json_out=$(mktemp -t git_commit_ai.XXXXXX --tmpdir)
	system_prompt="You are a helpful coding AI assistant. You always output plaintext without markdown."
	user_prompt="Output only the git commit command for the following git diff. Do not include any markdown formatting, triple backticks, discussion, or description. Provide the command in plain text, exactly as it should be entered in a command-line interface. If multiple lines of commit messages are required, use separate '-m' arguments to git. If no diff data is present, just state 'No diff data'."
	trap 'rm -f "$temp_json" && rm -f "$temp_json_out"' EXIT # ensure temp file is cleaned up on exit

	local_llm=false
	if [[ "$openai_host" == localhost* ]]; then
		local_llm=true
	fi

	if $local_llm; then
		jq -n --arg model "$model" \
					--arg diff "$diff" \
					--argjson top_k "$top_k" \
					--argjson top_p "$top_p" \
					--argjson repeat_penalty "$repeat_penalty" \
					--argjson temperature "$temperature" \
					--argjson num_ctx "$num_ctx" \
					--arg system "$system_prompt" \
					--arg user "$user_prompt" \
					'{
						"model": $model,
						"messages": [
							{"role": "system", "content": $system},
							{"role": "user", "content": ($user + "\n\n" + $diff)}
						],
						"temperature": $temperature,
						"top_k": $top_k,
						"top_p": $top_p,
						"repeat_penalty": $repeat_penalty,
						"num_ctx": $num_ctx
					}' > "$temp_json"
	else
		jq -n --arg model "$model" \
					--arg diff "$diff" \
					--argjson temperature "$temperature" \
					--arg system "$system_prompt" \
					--arg user "$user_prompt" \
					'{
						"model": $model,
						"messages": [
							{"role": "system", "content": $system},
							{"role": "user", "content": ($user + "\n\n" + $diff)}
						],
						"temperature": $temperature
					}' > "$temp_json"
	fi

	http_status=$(curl -s -w "%{http_code}" -o "$temp_json_out" \
		-X POST \
		-H "Content-Type: application/json" \
		-H "Authorization: Bearer $OPENAI_API_KEY" \
		-d @"$temp_json" \
		--max-time "$timeout" \
		"$openai_url")

	if [[ "$http_status" -ne 200 ]]; then
		echo "Error: HTTP status $http_status" >&2
		cat "$temp_json_out" >&2
		rm -f "$temp_json" "$temp_json_out"
		return 1
	fi

	if $local_llm; then
		commit_message=$(jq -r '.message.content' "$temp_json_out")
	else
		commit_message=$(jq -r '.choices[0].message.content' "$temp_json_out")
	fi

	rm -f "$temp_json" "$temp_json_out"

	if [[ -z "$commit_message" ]]; then
		echo "Error: No commit message generated." >&2
		return 1
	fi

	if [[ "$commit_message" == "No diff data" ]]; then
		echo "No changes to commit." >&2
		return 1
	fi

	echo "$commit_message"

	# Copy to clipboard
	printf "%s" "$commit_message" | clip -q
	echo "Commit command copied to clipboard." >&2
}

# Default AI model and host settings
export DEFAULT_LOCAL_AI_MODEL=${DEFAULT_LOCAL_AI_MODEL:-qwen2.5-coder:32b}
export DEFAULT_LOCAL_AI_HOST=${DEFAULT_LOCAL_AI_HOST:-localhost:11434}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
