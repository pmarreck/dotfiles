#!/usr/bin/env ruby

brew_bin = '/usr/local/bin/brew'

# compare live taps to file

expected_taps = File.read(File.expand_path("~/Tapfile")).split rescue []

current_taps = `#{brew_bin} tap`.split

new_taps = expected_taps - current_taps

removed_taps = current_taps - expected_taps

puts "** Possibly new taps **" unless new_taps.empty?
new_taps.each do |tap|
  print "Tap #{tap}? [Y/y] "
  y = gets[0,1].capitalize
  unless y=='N'
    cmd = "#{brew_bin} tap #{tap}"
    puts cmd
    puts `#{cmd}`
  end
end

puts "** Possibly removed taps **" unless removed_taps.empty?
removed_taps.each do |tap|
  print "Untap #{tap}? [Y/y] "
  y = gets[0,1].capitalize
  unless y=='N'
    cmd = "#{brew_bin} untap #{tap}"
    puts cmd
    puts `#{cmd}`
  end
end

# compare live brews to file

expected_brews = File.read(File.expand_path("~/Brewfile")).split rescue []

current_brews = `#{brew_bin} list`.split

new_brews = expected_brews - current_brews

removed_brews = current_brews - expected_brews

puts "** Possibly new brews **" unless new_brews.empty?
new_brews.each do |brew|
  print "Install #{brew}? [Y/y] "
  y = gets[0,1].capitalize
  unless y=='N'
    cmd = "#{brew_bin} install #{brew}"
    puts cmd
    puts `#{cmd}`
  end
end

puts "** Possibly removed brews **" unless removed_brews.empty?
removed_brews.each do |brew|
  print "Remove #{brew}? [Y/y] "
  y = gets[0,1].capitalize
  unless y=='N'
    cmd = "#{brew_bin} remove #{brew}"
    puts cmd
    puts `#{cmd}`
  end
end

print "Update Homebrew? [Y/y] "
u = gets[0,1].capitalize
unless u=='N'
  cmd = "#{brew_bin} update"
  puts cmd
  puts `#{cmd}`
end

print "Upgrade brews? [Y/y] "
u = gets[0,1].capitalize
unless u=='N'
  cmd = "#{brew_bin} upgrade"
  puts cmd
  puts `#{cmd}`
end
