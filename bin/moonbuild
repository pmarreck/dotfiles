#!/usr/bin/env bash
set -uo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
script_path="$script_dir/$(basename "${BASH_SOURCE[0]}")"

usage() {
  cat <<EOF >&2
Usage: moonbuild [--test] <file>
Compile a Moonscript file to Lua if needed.
Options:
  --test   Run built-in unit tests.
EOF
}

main() {
  set -euo pipefail
  if [[ $# -ne 1 ]]; then usage; exit 1; fi
  input="$1"
  # Determine source and base for .moon files (support extensionless input)
  if [[ "$input" == *.moon ]]; then
    base="${input%.moon}"
    src="$input"
  elif [[ -e "$input" ]]; then
    base="$input"
    src="$input"
  else
    base="$input"
    src="$input.moon"
  fi
  out="$base.lua"

  if [[ ! -e "$src" ]]; then
    echo "Error: '$src' not found." >&2
    exit 1
  fi

  if [[ -e "$out" ]]; then
    # skip build if modification times are equal (built-in tests avoid gstat)
    if [[ ! "$src" -nt "$out" && ! "$out" -nt "$src" ]]; then
      exit 0
    fi
  fi

  moonc "$src"
  if [[ ! -e "$out" ]]; then
    echo "Error: expected '$out' after compilation." >&2
    exit 1
  fi
  gtouch -r "$src" "$out"
}

test_suite() {
  local failures=0
  echo "Running moonbuild tests..."

  # Test 1: nonexistent file
  printf "Test 1 (nonexistent file)... "
  out=$("$script_path" nonexistent.moon 2>&1)
  rc=$?
  if [[ $rc -ne 0 ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi

  # Test 2: missing lua file
  printf "Test 2 (missing lua file)... "
  tmp2=$(mktemp -d) && cd "$tmp2"
  echo 'print "hello"' > foo.moon
  out=$("$script_path" foo.moon 2>&1)
  rc=$?
  if [[ $rc -eq 0 && -e foo.lua ]]; then
    src_time=$(gstat -c %Y foo.moon)
    out_time=$(gstat -c %Y foo.lua)
    if [[ $src_time -eq $out_time ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
  else
    echo "FAILED"; failures=$((failures+1))
  fi
  cd - >/dev/null && rm -rf "$tmp2"

  # Test 3: outdated lua file
  printf "Test 3 (outdated lua file)... "
  tmp3=$(mktemp -d) && cd "$tmp3"
  echo 'print "hello"' > foo.moon
  "$script_path" foo.moon >/dev/null 2>&1
  # make lua older
  gtouch -d "2000-01-01 00:00:00" foo.lua
  out=$("$script_path" foo.moon 2>&1)
  rc=$?
  if [[ $rc -eq 0 ]]; then
    src_time=$(gstat -c %Y foo.moon)
    out_time=$(gstat -c %Y foo.lua)
    if [[ $src_time -eq $out_time ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
  else
    echo "FAILED"; failures=$((failures+1))
  fi
  cd - >/dev/null && rm -rf "$tmp3"

  # Test 4: input without .moon suffix
  printf "Test 4 (input without .moon)... "
  tmp4=$(mktemp -d) && cd "$tmp4"
  echo 'print "hi"' > bar.moon
  out=$("$script_path" bar 2>&1)
  rc=$?
  if [[ $rc -eq 0 && -e bar.lua ]]; then
    src_time=$(gstat -c %Y bar.moon)
    out_time=$(gstat -c %Y bar.lua)
    if [[ $src_time -eq $out_time ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
  else
    echo "FAILED"; failures=$((failures+1))
  fi
  cd - >/dev/null && rm -rf "$tmp4"

  # Summary
  if [[ $failures -eq 0 ]]; then
    echo "All tests passed"
    exit 0
  else
    echo "$failures test(s) failed"
    exit 1
  fi
}

# Entry point
if [[ "${1:-}" == "--test" ]]; then test_suite; exit $?; fi
main "$@"
