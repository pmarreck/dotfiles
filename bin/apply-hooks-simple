#!/usr/bin/env bash

# Simplified, declarative shell hooks without bash-preexec complexity
# This version focuses on reliability over features

[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Entering $(echo "${BASH_SOURCE[0]}" | $SED "s|^$HOME|~|")"

# Clear any existing hooks to start fresh
unset PROMPT_COMMAND
unset precmd_functions
unset preexec_functions

# CRITICAL: Remove any DEBUG traps that cause command hanging
trap - DEBUG

# Simple function to safely initialize tools with timeout
safe_init() {
    local tool="$1"
    local init_cmd="$2"
    local timeout_duration="${3:-10s}"
    
    if ! command -v "$tool" >/dev/null 2>&1; then
        echo "Warning: $tool not found, skipping initialization" >&2
        return 1
    fi
    
    local init_output
    if init_output=$(timeout "$timeout_duration" bash -c "$init_cmd" 2>&1); then
        if [ -n "$init_output" ]; then
            eval "$init_output"
            [ -n "${DEBUG_SHELLCONFIG}" ] && echo "Successfully initialized $tool" >&2
        else
            echo "Warning: $tool returned empty output" >&2
        fi
        return 0
    else
        echo "Warning: $tool initialization failed" >&2
        return 1
    fi
}

# Initialize tools in order of importance
# Only initialize if the command completes within timeout

# 1. Direnv (most critical for project environments)
safe_init "direnv" "direnv hook bash" "10s"

# 2. Starship (prompt)
safe_init "starship" "starship init bash" "10s"

# 3. McFly (history search - nice to have)
safe_init "mcfly" "mcfly init bash" "10s"

# 4. Set up simple WezTerm integration if needed
if [ "$TERM_PROGRAM" = "WezTerm" ]; then
    # Simple OSC 7 support without complex hooks
    if [ -z "$PROMPT_COMMAND" ]; then
        PROMPT_COMMAND='printf "\e]7;file://%s%s\a" "$HOSTNAME" "$PWD"'
    else
        PROMPT_COMMAND='printf "\e]7;file://%s%s\a" "$HOSTNAME" "$PWD"; '"$PROMPT_COMMAND"
    fi
fi

# If nothing worked, set up a basic prompt
if [ -z "$PROMPT_COMMAND" ] && ! command -v starship >/dev/null 2>&1; then
    PS1='\u@\h:\w\$ '
fi

[ -n "${DEBUG_SHELLCONFIG}" ] && echo "Exiting $(echo "${BASH_SOURCE[0]}" | sed "s|^$HOME|~|")"

# Ensure script returns successfully when sourced
return 0 2>/dev/null || true