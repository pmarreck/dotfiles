# add binhex command to dump hex from stdin or args (note that hexdump also exists)
# usage: echo "peter" | binhex
# or: binhex peter
binhex() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  if [ -z "$1" ]; then # if no arguments
    if [ ! -t 0 ]; then
      xxd -pu  # receive piped input from stdin
    else # if stdin is empty AND no arguments
      echo "Usage: binhex <string>"
      echo "       (or pipe something to binhex)"
      echo "This function is defined in ${BASH_SOURCE[0]}"
    fi
  else # if arguments
    printf "%b" "$1" | xxd -pu # pipe all arguments to xxd
  fi
}

# convert hex back to binary
hexbin() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  if [ -z "$1" ]; then # if no arguments
    if [ ! -t 0 ]; then
      xxd -r -p   # receive piped input from stdin
    else # if stdin is empty AND no arguments
      echo "Usage: hexbin <hex string>"
      echo "       (or pipe something to hexbin)"
      echo "This function is defined in ${BASH_SOURCE[0]}"
    fi
  else # if arguments
    printf "%b" "$1" | xxd -r -p  # pipe all arguments to xxd
  fi
}

if [ "$RUN_DOTFILE_TESTS" == "true" ]; then
  # this is at the bottom because assert depends on binhex/hexbin
  . $HOME/dotfiles/bin/functions/assert.bash
  assert "$(binhex "Peter")" == "5065746572" "binhex function should encode binary strings to hex"
  assert "$(hexbin "5065746572")" == "Peter" "hexbin function should decode binary from hex"
  assert "$(binhex "Peter" | hexbin)" == "Peter" "hexbin function should accept a pipe"
  assert "$(hexbin "5065746572" | binhex)" == "5065746572" "binhex function should accept a pipe"
  # TODO: the following is not easy to make pass so tabled for now. just be aware of it
  # POSIX standard literally says that linefeeds after command substitution should be removed, sigh
  # Consider appending a formfeed character (\f) to plaintext or "0a" to the hex to work around this,
  # which is what I did here
  assert "$(hexbin "50657465720a0c")" == "Peter\n\f" "hexbin function shouldn't eat hex-encoded end-of-line newlines"
fi
