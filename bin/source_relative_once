#!/usr/bin/env bash

source_relative_once() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	[[ -n "${_TRACE_SOURCING}" ]] && local _debug_id=$RANDOM
	local _file="$1"
	# check if it is already an absolute path
	if [[ "$_file" != /* ]]; then
		[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _file is $_file"
		# Get the directory of the currently executing script
		# _dir=`dirname "$0"` # doesn't work reliably
		[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: BASH_SOURCE[1] is ${BASH_SOURCE[1]}"
		local _dir=`dirname "${BASH_SOURCE[1]}"` # works in bash but not POSIX compliant sh
		[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _dir is $_dir"
		# Convert the relative path to an absolute path
		local _abs_path="$_dir/$_file"
	else
		local _abs_path="$_file"
		[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _file is already an absolute path" >&2
	fi
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_path is $_abs_path"
	# now resolve any symlinks in the path
	_abs_path=`readlink -f "$_abs_path"`
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_path after realpath is $_abs_path"
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_path is $_abs_path"
	local _abs_temp_dirname=`dirname "$_abs_path"`
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_temp_dirname is $_abs_temp_dirname"
	local _abs_dirname=`cd "$_abs_temp_dirname" && pwd`
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_dirname after cd/pwd is $_abs_dirname"
	# test if _abs_dirname is empty
	if [ -z "$_abs_dirname" ]; then
		echo "Error in source_relative_once: $_abs_temp_dirname is not a valid directory" >&2
		return
	fi
	local _abs_filename=`basename "$_abs_path"`
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_filename after basename is $_abs_filename"
	local _abs_path="$_abs_dirname/$_abs_filename"
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: _abs_path after recombining is $_abs_path"
	# test if _abs_path is empty
	if [ -z "$_abs_path" ]; then
		echo "Error in source_relative_once: \$_abs_path is blank" >&2
		return
	fi

	if [ ! -e "$_abs_path" ]; then
		echo "Error in source_relative_once: could not find file $_abs_path" >&2
		return
	fi

	# check if it is a softlink; if so, resolve it to the actual path
	if [ -L "$_abs_path" ]; then
		_abs_path=`realpath "$_abs_path"`
	fi

	# Check if the file has already been sourced
	if [[ " ${_SOURCED_FILES} " =~ " ${_abs_path} " ]]; then
		[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: Already sourced \"$_abs_path\"" >&2
		return
	fi
	# If the file hasn't been sourced yet, source it and add it to the list of sourced files
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: Sourcing (once?) \"$_abs_path\"" >&2
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: prior to sourcing, _SOURCED_FILES is now $(wc -w <<< "$_SOURCED_FILES") long" >&2
	if [ -z "$_SOURCED_FILES" ]; then
		# So the reason why we DO NOT export this is to force reloading of all dotfiles in a new shell
		_SOURCED_FILES="$_abs_path"
	else
		_SOURCED_FILES="$_abs_path $_SOURCED_FILES"
	fi
	export _SOURCED_FILES
	[[ -n "$DEBUG_SHELLCONFIG" ]] && echo "Sourcing $_abs_path once (hypothetically...)" >&2
	source "$_abs_path" || echo "Problem when sourcing $_abs_path" >&2
	[[ -n "${_TRACE_SOURCING}" ]] && echo "source_relative_once invocation #${_debug_id}: after sourcing \"$_abs_path\", _SOURCED_FILES is now $(wc -w <<< "$_SOURCED_FILES") long" >&2
	return 0 # or else this exits nonzero and breaks other things
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
