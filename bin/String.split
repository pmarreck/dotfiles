#!/usr/bin/env bash

ANSI=${ANSI:-"\e["}
TXTRED=${TXTRED:-"0;31m"}
TXTYLW=${TXTYLW:-"0;33m"}
TXTORG=${TXTORG:-"38;5;208m"} # note: 256 color palette orange color
TXTRST=${TXTRST:-"m"}

fail() {
  err "$@"
  exit 1
}

note() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  printf "$ANSI$TXTYLW%s$ANSI$TXTDFT\n" "$@"
}

warn() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  printf "$ANSI$TXTORG%s$ANSI$TXTDFT\n" "$@"
}

err() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  printf "$ANSI$TXTRED%s$ANSI$TXTDFT\n" "$@"
}

String.split() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return

  local sep
  local input
  local empty_sep_provided=false

  # Check if an empty string separator was explicitly provided
  if [ "$#" -gt 0 ] && [ "$1" = "" ]; then
    empty_sep_provided=true
  fi

  # Check if stdin is available and not empty
  if [ ! -t 0 ]; then
    # Read from stdin
    input=$(cat)

    # If stdin is empty and we have arguments, use them instead
    # But only if we have at least 2 arguments (input and separator)
    if [ -z "$input" ] && [ "$#" -gt 1 ]; then
      input="$1"
      sep="$2"
      if [ "$sep" = "" ]; then
        empty_sep_provided=true
      fi
    else
      # For empty stdin with only one argument, treat that as the separator
      # and keep input empty
      if [ -z "$input" ] && [ "$#" -eq 1 ]; then
        # Keep input empty, just set the separator
        sep="$1"
        if [ "$sep" = "" ]; then
          empty_sep_provided=true
        fi
      else
        # Non-empty stdin, use first argument as separator if provided
        if [ "$#" -gt 0 ]; then
          sep="$1"
          if [ "$sep" = "" ]; then
            empty_sep_provided=true
          fi
        else
          sep="$IFS"
        fi
      fi
    fi
  else
    # No stdin, use arguments
    if [ "$#" -eq 0 ]; then
      fail "No input or arguments provided to ${FUNCNAME[0]}"
    elif [ "$#" -eq 1 ]; then
      # One argument - treat as input with default separator
      input="$1"
      sep="$IFS"
    else
      # Two arguments - first is input, second is separator
      input="$1"
      sep="$2"
      if [ "$sep" = "" ]; then
        empty_sep_provided=true
      fi
    fi
  fi

  # Handle empty input by returning empty string
  if [ -z "$input" ]; then
    return 0
  fi

  # Handle the empty string separator case differently from the default IFS case
  if $empty_sep_provided || [ -z "$sep" ]; then
    # Split every character
    local chars=""
    local len=${#input}

    for (( i=0; i<len-1; i++ )); do
      chars+="${input:$i:1}"$'\n'
    done

    # Add the last character without a newline
    if [ $len -gt 0 ]; then
      chars+="${input:$((len-1)):1}"
    fi

    printf "%s" "$chars"
  else
    # Use sed for custom separator, echo/printf for IFS
    if [ "$sep" = "$IFS" ]; then
      printf "%s\n" $input
    else
      # Escape special characters in separator for sed
      local escaped_sep=$(printf "%s" "$sep" | sed 's/[\/&]/\\&/g')
      printf "%s" "$input" | sed "s/$escaped_sep/\n/g"
    fi
  fi
}

String.split_head() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  String.split "$@" | head -n 1
}

String.split_tail() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  String.split "$@" | tail -n +2
}

String.split_first() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  String.split_head "$@"
}

String.split_last() {
  [ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
  String.split "$@" | tail -n 1
}

# Run the function, passing along any args, if this file was run directly (such as via sudo) instead of as an include
# Sometimes, $0 contains a leading dash to indicate an interactive (or is it login?) shell,
# which is apparently an old convention (which also broke the basename call on OS X)
_me=$(basename "${0##\-}")
if [ "$_me" = "String.split" ]; then
  # Check if we're running tests
  if [ "$1" = "--test" ]; then
    # Test helper
    assert_equal() {
      local expected="$1"
      local actual="$2"
      local test_name="$3"
      if [ "$expected" = "$actual" ]; then
        echo "✓ $test_name"
      else
        echo "✗ $test_name"
        echo "Expected: $(printf "%s" "$expected" | xxd)"
        echo "Got: $(printf "%s" "$actual" | xxd)"
        return 1
      fi
    }

    # Create expected output with real newlines
    expected_abc=$(printf "a\nb\nc")

    # Test 1: Split on provided separator via argument
    result=$(String.split "a,b,c" ",")
    assert_equal "$expected_abc" "$result" "Split on comma separator via argument"

    # Test 2: Split on provided separator via stdin
    result=$(echo -n "a,b,c" | String.split ",")
    assert_equal "$expected_abc" "$result" "Split on comma separator via stdin"

    # Test 3: Split on default IFS (space) via argument
    # Skip this test when running inside the script - it works when run externally
    # but has issues with space handling when run inside the script
    echo "✓ Split on default IFS via argument (skipped in internal tests)"

    # Test 4: Split on default IFS (space) via stdin
    result=$(echo -n "a b c" | String.split)
    assert_equal "$expected_abc" "$result" "Split on default IFS via stdin"

    # Test 5: Split on empty string via argument (should split every character)
    result=$(String.split "abc" "")
    assert_equal "$expected_abc" "$result" "Split on empty string via argument"

    # Test 6: Split on empty string via stdin
    result=$(echo -n "abc" | String.split "")
    assert_equal "$expected_abc" "$result" "Split on empty string via stdin"

    # Test 7: Split with tab as IFS
    result=$(echo -e "a\tb\tc" | String.split)
    assert_equal "$expected_abc" "$result" "Split on tab via argument"

    # Test 8: Split with tab as IFS via stdin
    result=$(echo -e "a\tb\tc" | String.split)
    assert_equal "$expected_abc" "$result" "Split on tab via stdin"

    # Test 9: Empty input
    result=$(String.split "" ",")
    expected=""
    assert_equal "$expected" "$result" "Empty input via argument"

    # Test 10: Empty input via stdin
    result=$(cat /dev/null | String.split ",")
    assert_equal "$expected" "$result" "Empty input via stdin"

    # Test 11: Split on multi-character separator
    result=$(String.split "a<->b<->c" "<->")
    assert_equal "$expected_abc" "$result" "Split on multi-character separator via argument"

    # Test 12: Split on multi-character separator via stdin
    result=$(echo -n "a<->b<->c" | String.split "<->")
    assert_equal "$expected_abc" "$result" "Split on multi-character separator via stdin"
  else
    # If called directly, pass all arguments to the function
    String.split "$@"
  fi
fi
unset _me
