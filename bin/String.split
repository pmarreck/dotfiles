#!/usr/bin/env bash

String.split() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return

	local sep
	local input
	local empty_sep_provided=false

	# Check if an empty string separator was explicitly provided
	if [ "$#" -gt 0 ] && [ "$1" = "" ]; then
		empty_sep_provided=true
	fi

	# Check if stdin is available and not empty
	if [ ! -t 0 ]; then
		# Read from stdin
		input=$(cat)

		# If stdin is empty and we have arguments, use them instead
		# But only if we have at least 2 arguments (input and separator)
		if [ -z "$input" ] && [ "$#" -gt 1 ]; then
			input="$1"
			sep="$2"
			if [ "$sep" = "" ]; then
				empty_sep_provided=true
			fi
		else
			# For empty stdin with only one argument, treat that as the separator
			# and keep input empty
			if [ -z "$input" ] && [ "$#" -eq 1 ]; then
				# Keep input empty, just set the separator
				sep="$1"
				if [ "$sep" = "" ]; then
					empty_sep_provided=true
				fi
			else
				# Non-empty stdin, use first argument as separator if provided
				if [ "$#" -gt 0 ]; then
					sep="$1"
					if [ "$sep" = "" ]; then
						empty_sep_provided=true
					fi
				else
					sep="$IFS"
				fi
			fi
		fi
	else
		# No stdin, use arguments
		if [ "$#" -eq 0 ]; then
			fail "No input or arguments provided to ${FUNCNAME[0]}"
		elif [ "$#" -eq 1 ]; then
			# One argument - treat as input with default separator
			input="$1"
			sep="$IFS"
		else
			# Two arguments - first is input, second is separator
			input="$1"
			sep="$2"
			if [ "$sep" = "" ]; then
				empty_sep_provided=true
			fi
		fi
	fi

	# Handle empty input by returning empty string
	if [ -z "$input" ]; then
		return 0
	fi

	# Handle the empty string separator case differently from the default IFS case
	if $empty_sep_provided || [ -z "$sep" ]; then
		# Split every character
		local chars=""
		local len=${#input}

		for (( i=0; i<len-1; i++ )); do
			chars+="${input:$i:1}"$'\n'
		done

		# Add the last character without a newline
		if [ $len -gt 0 ]; then
			chars+="${input:$((len-1)):1}"
		fi

		printf "%s" "$chars"
	else
		# Use sed for custom separator, echo/printf for IFS
		if [ "$sep" = "$IFS" ]; then
			printf "%s\n" $input
		else
			# Escape special characters in separator for sed
			local escaped_sep=$(printf "%s" "$sep" | sed 's/[\/&]/\\&/g')
			printf "%s" "$input" | sed "s/$escaped_sep/\n/g"
		fi
	fi
}

String.split_head() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	String.split "$@" | head -n 1
}

String.split_tail() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	String.split "$@" | tail -n +2
}

String.split_first() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	String.split_head "$@"
}

String.split_last() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	String.split "$@" | tail -n 1
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
