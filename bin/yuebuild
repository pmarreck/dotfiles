#!/usr/bin/env sh
# yuebuild - Compile YueScript source to Lua when needed.

set -eu

script_path=$(command -v "$0" 2>/dev/null || echo "$0")
script_dir=$(dirname "$script_path")
script_dir=$(cd "$script_dir" 2>/dev/null && pwd -P)
script_name=$(basename "$script_path")
script_path="$script_dir/$script_name"

usage() {
	cat <<EOF_USAGE
Usage: $script_name [options] <file>

Compile a YueScript file to Lua when it is missing or outdated.

OPTIONS:
	-h, --help      Show this help and exit
	--test          Run built-in unit tests
	-o <path>       Explicit output Lua file (overrides cache)
	--cache <dir>   Directory for generated Lua output (overrides env)

ENVIRONMENT:
	YUE_BUILD_CACHE  Default directory for generated Lua files
EOF_USAGE
}

resolve_with_base() {
	base_dir=$1
	target_path=$2
	case $target_path in
		/*)
			printf '%s\n' "$target_path"
			;;
		*)
			printf '%s/%s\n' "$base_dir" "$target_path"
			;;
	esac
}

ensure_sources() {
	input=$1
	case $input in
		*.yue)
			base=${input%".yue"}
			src=$input
			;;
		*)
			if [ -e "$input" ]; then
				base=$input
				src=$input
			else
				base=$input
				src=$input.yue
			fi
			;;
	esac
	out=$base.lua
}

build_dependencies() {
	src_file=$1
	src_dir=$(dirname "$src_file")
	grep -Eo "require *['\"][^'\"]+['\"]" "$src_file" 2>/dev/null |
		sed -E "s/require *['\"]([^'\"]+)['\"]/\1/" |
		while IFS= read -r module; do
			[ -n "$module" ] || continue
			modpath=$src_dir/$module.yue
			if [ -e "$modpath" ]; then
				"$script_path" "$modpath" >/dev/null 2>&1
			fi
		done
}

main() {
	if [ $# -lt 1 ]; then
		usage >&2
		return 1
	fi

	output_override=
	cache_override=
	while [ $# -gt 0 ]; do
		case $1 in
			-h|--help)
				usage
				return 0
				;;
			-o)
				if [ $# -lt 2 ]; then
					usage >&2
					return 1
				fi
				output_override=$2
				shift 2
				continue
				;;
			--cache)
				if [ $# -lt 2 ]; then
					usage >&2
					return 1
				fi
				cache_override=$2
				shift 2
				continue
				;;
			--cache=*)
				cache_override=${1#*=}
				shift
				continue
				;;
			--)
				shift
				break
				;;
			--*)
				usage >&2
				return 1
				;;
			*)
				break
				;;
		esac
	done

	if [ $# -ne 1 ]; then
		usage >&2
		return 1
	fi

	input=$1
	ensure_sources "$input"

	if [ ! -e "$src" ]; then
		printf "Error: '%s' not found.\n" "$src" >&2
		return 1
	fi

	src_dir_raw=$(dirname "$src")
	src_dir_abs=$( (cd "$src_dir_raw" 2>/dev/null && pwd -P) )
	if [ -z "$src_dir_abs" ]; then
		printf "Error: failed to resolve directory for '%s'.\n" "$src" >&2
		return 1
	fi

	build_dependencies "$src"

	cache_dir=$src_dir_abs
	if [ -n "${YUE_BUILD_CACHE:-}" ]; then
		cache_dir=$(resolve_with_base "$src_dir_abs" "$YUE_BUILD_CACHE")
	fi
	if [ -n "$cache_override" ]; then
		cache_dir=$(resolve_with_base "$src_dir_abs" "$cache_override")
	fi

	file_name=$(basename "$base")
	if [ -n "$output_override" ]; then
		out=$(resolve_with_base "$src_dir_abs" "$output_override")
	else
		out=$cache_dir/$file_name.lua
	fi

	generated_path=$src_dir_abs/$file_name.lua

	if [ -e "$out" ] && [ ! "$src" -nt "$out" ] && [ ! "$out" -nt "$src" ]; then
		return 0
	fi

	mkdir -p "$(dirname "$out")"

	if ! yue "$src" >/dev/null 2>&1; then
		return 1
	fi

	if [ ! -e "$generated_path" ]; then
		printf "Error: expected '%s' after compilation.\n" "$generated_path" >&2
		return 1
	fi

	tmpfile=$(mktemp "${TMPDIR:-/tmp}/yuebuild.XXXXXX") || return 1
	{
		printf -- '%s\n' "-- This Lua file was automatically generated from $(basename "$src")"
		printf -- '%s\n' "-- Do not edit this file directly; modify the source file instead"
		printf -- '\n'
		cat "$generated_path"
	} > "$tmpfile"
	mv "$tmpfile" "$out"

	if [ "$generated_path" != "$out" ]; then
		rm -f "$generated_path"
	fi

	gtouch -r "$src" "$out"
}

test_suite() {
	failures=0
	printf "Running yuebuild tests...\n"

	printf "Test 1 (nonexistent file)... "
	if "$script_path" nonexistent.yue >/dev/null 2>&1; then
		printf "FAILED\n"
		failures=$((failures + 1))
	else
		printf "PASSED\n"
	fi

	printf "Test 2 (missing lua file)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'print "hello"\n' > foo.yue
	if "$script_path" foo.yue >/dev/null 2>&1; then
		if [ -e foo.lua ] && [ ! foo.yue -nt foo.lua ] && [ ! foo.lua -nt foo.yue ]; then
			printf "PASSED\n"
		else
			printf "FAILED\n"
			failures=$((failures + 1))
		fi
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 3 (outdated lua file)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'print "hello"\n' > foo.yue
	"$script_path" foo.yue >/dev/null 2>&1
	gtouch -d "2000-01-01 00:00:00" foo.lua
	if "$script_path" foo.yue >/dev/null 2>&1; then
		if [ ! foo.yue -nt foo.lua ] && [ ! foo.lua -nt foo.yue ]; then
			printf "PASSED\n"
		else
			printf "FAILED\n"
			failures=$((failures + 1))
		fi
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 4 (input without .yue)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'print "hi"\n' > bar.yue
	if "$script_path" bar >/dev/null 2>&1; then
		if [ -e bar.lua ] && [ ! bar.yue -nt bar.lua ] && [ ! bar.lua -nt bar.yue ]; then
			printf "PASSED\n"
		else
			printf "FAILED\n"
			failures=$((failures + 1))
		fi
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 5 (--cache option)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_cache.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	mkdir src
	cd src || exit 1
	printf 'print "hello"\n' > foo.yue
	if "$script_path" --cache ../cache foo.yue >/dev/null 2>&1; then
		if [ -e ../cache/foo.lua ] && [ ! -e foo.lua ]; then
			printf "PASSED\n"
		else
			printf "FAILED\n"
			failures=$((failures + 1))
		fi
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 6 (YUE_BUILD_CACHE env)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_env.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	mkdir src
	cd src || exit 1
	printf 'print "env"\n' > foo.yue
	YUE_BUILD_CACHE=../envcache "$script_path" foo.yue >/dev/null 2>&1
	if [ -e ../envcache/foo.lua ] && [ ! -e foo.lua ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 7 (-o overrides cache)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuebuild_output.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	mkdir src
	cd src || exit 1
	printf 'print "custom"\n' > foo.yue
	YUE_BUILD_CACHE=../envcache "$script_path" --cache ../cache -o ../out/custom.lua foo.yue >/dev/null 2>&1
	if [ -e ../out/custom.lua ] && [ ! -e ../cache/foo.lua ] && [ ! -e foo.lua ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	if [ "$failures" -eq 0 ]; then
		printf "All tests passed\n"
		return 0
	fi
	printf "%s test(s) failed\n" "$failures" >&2
	return "$failures"
}

if [ $# -eq 0 ]; then
	usage >&2
	exit 1
fi

case $1 in
	-h|--help)
		usage
		exit 0
		;;
	--test)
		if [ $# -ne 1 ]; then
			usage >&2
			exit 1
		fi
		test_suite
		exit $?
		;;
esac

main "$@"
