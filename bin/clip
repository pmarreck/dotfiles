#!/usr/bin/env bash

source $HOME/dotfiles/bin/src/truthy.sh

# Debug function. Can use as `debug` to check whether in debug mode (DEBUG=some truthy value), or `debug "some message"`
declare -F debug > /dev/null || \
debug() {
	if [ $# = 0 ]; then
		truthy DEBUG
	else
		if truthy DEBUG; then
			echo -e "\033[33mDEBUG: $*\033[0m" >&2
		else
			:
		fi
	fi
}

# Determine clipboard functions once on load/source
if [ -z "$CLIP_INITIALIZED" ]; then
	if succeeds type pbcopy; then
		# macOS
		clip_copy() { printf "%s" "$1" | pbcopy; }
		clip_copy_stdin() { pbcopy; }
		clip_paste() { pbpaste 2>/dev/null; }
		clip_clear() { echo -n "" | pbcopy; }
		clip_save() { pbpaste > "$1" 2>/dev/null; }
		clip_restore() { pbcopy < "$1"; }
	elif succeeds type wl-copy; then
		# Wayland Linux
		clip_copy() { printf "%s" "$1" | wl-copy; }
		clip_copy_stdin() { wl-copy; }
		clip_paste() { wl-paste 2>/dev/null; }
		clip_clear() { wl-copy --clear; }
		clip_save() { wl-paste > "$1" 2>/dev/null; }
		clip_restore() { wl-copy < "$1"; }
	elif succeeds type xclip; then
		# X11 Linux
		clip_copy() { printf "%s" "$1" | xclip -i -selection clipboard 2>/dev/null || true; }
		clip_copy_stdin() { xclip -i -selection clipboard 2>/dev/null || true; }
		clip_paste() { xclip -o -selection clipboard 2>/dev/null || true; }
		clip_clear() { xclip -i -selection clipboard < /dev/null 2>/dev/null || true; }
		clip_save() { xclip -o -selection clipboard > "$1" 2>/dev/null || true; }
		clip_restore() { xclip -i -selection clipboard < "$1" 2>/dev/null || true; }
	else
		echo "Error: No clipboard command found (pbcopy, wl-copy, or xclip)" >&2
		exit 1
	fi
	
	CLIP_INITIALIZED=true
fi

clip_usage() {
	cat << EOF
Usage: clip [OPTIONS] [TEXT...]

A clipboard utility that works across macOS, X11, and Wayland environments.

Options:
  -h, --help     Display this help message and exit
  -a, --about    Show brief description  
  -q, --quiet    Suppress output when copying to clipboard
  --clear        Clear the clipboard
  --save         Save clipboard contents to temporary file
  --restore      Restore clipboard contents from temporary file
  --test         Run tests

Examples:
  clip "Hello World"     # Copy "Hello World" to clipboard and print it
  clip -q "Hello World" # Copy "Hello World" to clipboard silently
  echo "foo" | clip     # Copy stdin to clipboard and print it
  clip                  # Print clipboard contents
  clip --clear          # Clear clipboard
  clip --save           # Save clipboard to temp file
  clip --restore        # Restore clipboard from temp file
EOF
}

clip() {
	debug "Starting clip"
	local quiet=false
	local clear_clipboard=false
	local save_clipboard=false
	local restore_clipboard=false
	local clipboard_file=${clipboard_file:-"/tmp/clip_$$"}
	debug "Clipboard file: $clipboard_file"
	export clipboard_file # for subprocesses to use the same clipboard file with the same parent process ID
	if truthy DEBUG; then
		if [ $# = 0 ]; then
			debug "No arguments provided"
		else
			debug "clip called with $# args: '$*'"
		fi
	fi
	
	# Parse options
	while [ $# -gt 0 ]; do
		case "$1" in
			-h|--help)
				clip_usage
				return 0
				;;
			-a|--about)
				echo "Cross-platform clipboard utility for copy/paste operations"
				return 0
				;;
			-q|--quiet)
				quiet=true
				shift
				;;
			--clear)
				clear_clipboard=true
				shift
				;;
			--save)
				save_clipboard=true
				restore_clipboard=false
				shift
				;;
			--restore)
				restore_clipboard=true
				save_clipboard=false
				shift
				;;
			--)
				shift
				break
				;;
			--test)
				exec "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
				;;
			-*)
				echo "Error: Unknown option: $1" >&2
				clip_usage >&2
				return 2
				;;
			*)
				break
				;;
		esac
	done

	# Handle special operations first
	if $clear_clipboard; then
		clip_clear
		return 0
	fi

	if $save_clipboard; then
		clip_save "$clipboard_file"
		return $?
	fi

	if $restore_clipboard; then
		if [ -f "$clipboard_file" ]; then
			clip_restore "$clipboard_file"
			return $?
		else
			echo "Error: No saved clipboard file found at $clipboard_file" >&2
			return 1
		fi
	fi

	# If arguments are provided, copy them to clipboard
	if [ $# -gt 0 ]; then
		debug "Path: Arguments provided ($# args)"
		# Join all arguments with spaces and copy to clipboard
		local joined_args="$*"
		debug "About to call clip_copy with: '$joined_args'"
		clip_copy "$joined_args"
		debug "Finished clip_copy"

		# Output the text unless quiet mode is enabled
		if $quiet; then
			debug "Quiet mode - not outputting to stdout"
		else
			debug "About to output to stdout (not quiet mode)"
			printf "%s" "$joined_args"
			debug "Finished output to stdout"
		fi
	elif has_stdin; then
		debug "Path: Piped input with data available"
		# Stream stdin to clipboard
		if $quiet; then
			debug "About to call clip_copy_stdin in quiet mode"
			# Copy stdin to clipboard without echoing to stdout
			clip_copy_stdin >/dev/null
			debug "Finished clip_copy_stdin in quiet mode"
		else
			debug "About to call tee with clip_copy_stdin"
			# Use tee to both send to clipboard and output to stdout
			tee >(clip_copy_stdin >/dev/null)
			debug "Finished tee with clip_copy_stdin"
		fi
	else
		debug "Path: No arguments and no stdin data - reading from clipboard"
		# No arguments and no stdin data - read from clipboard
		clip_paste
	fi
	debug "Finished clip"
	return 0
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		exec "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		if [ $# = 0 ]; then
			$(basename "${0##\-}")
		else
			$(basename "${0##\-}") "$@"
		fi
	fi
fi
 