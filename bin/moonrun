#!/usr/bin/env bash
# moonrun - Moonscript transpile-and-run wrapper
#
# This script enables Moonscript files to be executed directly using a hashbang line,
# automatically handling transpilation to Lua when needed. It's designed to be used
# as the interpreter in the shebang of .moon files.
#
# TYPICAL USAGE IN SCRIPT HASHBANG:
#   #!/usr/bin/env moonrun
#   -- Your Moonscript code here
#   print "Hello from Moonscript!"
#
# HOW IT WORKS:
# 1. When you run a .moon file directly (via hashbang), moonrun is invoked
# 2. It checks if a corresponding .lua file exists and is up-to-date
# 3. If the .moon file is newer than .lua (or .lua doesn't exist), it calls moonbuild
# 4. Finally, it executes the .lua file with luajit, passing through all arguments
#
# This allows Moonscript files to behave like native executables while maintaining
# the performance benefits of running compiled Lua code. The transpilation step
# only occurs when the source file has been modified.
#
# DIRECT USAGE:
#   moonrun script.moon [args...]    # Run a Moonscript file
#   moonrun script [args...]         # Run script.moon (extension optional)
#
# DEPENDENCIES:
# - moonbuild (for transpilation)
# - luajit (for execution)
# - moonc compiler (used by moonbuild)

set -uo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
script_path="$script_dir/$(basename "${BASH_SOURCE[0]}")"

usage() {
	cat <<EOF >&2
moonrun - Moonscript transpile-and-run wrapper

DESCRIPTION:
    Enables Moonscript files to be executed directly via hashbang lines.
    Automatically transpiles .moon files to .lua when needed, then runs
    the compiled Lua with luajit.

USAGE:
    moonrun [--test] <file> [args...]

    In Moonscript file hashbang:
        #!/usr/bin/env moonrun

ARGUMENTS:
    file        Moonscript file to run (.moon extension optional)
    args...     Arguments passed to the Moonscript program

OPTIONS:
    --test      Run built-in unit tests

EXAMPLES:
    moonrun script.moon arg1 arg2     # Run Moonscript file with arguments
    moonrun script arg1 arg2          # Same (extension optional)

    In a Moonscript file:
        #!/usr/bin/env moonrun
        print "Hello from Moonscript!"

HOW IT WORKS:
    1. Checks if corresponding .lua file exists and is current
    2. Calls moonbuild to transpile if .moon is newer than .lua
    3. Executes the .lua file with luajit
    4. Only transpiles when source file has been modified

DEPENDENCIES:
    moonbuild, luajit, moonc compiler
EOF
}

main() {
	set -euo pipefail
	if [[ $# -lt 1 ]]; then usage; exit 1; fi

	# Check if first arg is a file or an option
	input="$1"
	shift

	# Determine source and base for .moon files (support extensionless input)
	if [[ "$input" == *.moon ]]; then
		base="${input%.moon}"
		src="$input"
	elif [[ -e "$input" ]]; then
		base="$input"
		src="$input"
	else
		base="$input"
		src="$input.moon"
	fi
	out="$base.lua"

	if [[ ! -e "$src" ]]; then
		echo "Error: '$src' not found." >&2
		exit 1
	fi

	need_build=false
	if [[ ! -e "$out" ]]; then
		need_build=true
	else
		# rebuild if modification times differ (avoid external gstat)
		if [[ "$src" -nt "$out" || "$out" -nt "$src" ]]; then
			need_build=true
		fi
	fi

	if $need_build; then
		"$script_dir/moonbuild" "$src"
	fi

	# Pass all remaining arguments to the Lua script
	exec luajit "$out" "$@"
}

test_suite() {
	set -o pipefail
	local failures=0
	echo "Running moonrun tests..."

	# Test 1: nonexistent file
	printf "Test 1 (nonexistent file)... "
	out=$("$script_path" nonexistent.moon 2>&1)
	rc=$?
	if [[ $rc -ne 0 ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi

	# Test 2: missing lua run
	printf "Test 2 (missing lua run)... "
	tmp=$(mktemp -d /tmp/moonrun_test.XXXXXX)
	trap 'rm -rf "$tmp"' EXIT
	cd "$tmp"
	echo 'io.write "hello2"' > foo.moon
	out=$("$script_path" foo.moon 2>&1)
	rc=$?
	if [[ $rc -eq 0 && "$out" == "hello2" ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
	cd - >/dev/null

	# Test 3: up-to-date lua run
	printf "Test 3 (uptodate lua run)... "
	tmp2=$(mktemp -d /tmp/moonrun_test.XXXXXX)
	cd "$tmp2"
	echo 'io.write "hello3"' > foo.moon
	"$script_dir/moonbuild" foo.moon >/dev/null 2>&1
	out=$("$script_path" foo.moon 2>&1)
	rc=$?
	if [[ $rc -eq 0 && "$out" == "hello3" ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
	cd - >/dev/null

	# Test 4: input without .moon suffix
	printf "Test 4 (input without .moon)... "
	tmp3=$(mktemp -d /tmp/moonrun_test.XXXXXX)
	cd "$tmp3"
	echo 'io.write "xyz"' > baz.moon
	out=$("$script_path" baz 2>&1)
	rc=$?
	if [[ $rc -eq 0 && "$out" == "xyz" ]]; then echo "PASSED"; else echo "FAILED"; failures=$((failures+1)); fi
	cd - >/dev/null

	# Test 5: require dependency
	printf "Test 5 (require dependency)... "
	tmp5=$(mktemp -d /tmp/moonrun_test.XXXXXX) && cd "$tmp5"
	echo 'print "lib loaded"' > lib.moon
	printf '%s\n%s\n' 'require "lib"' 'io.write "OK"' > main.moon
	out=$("$script_path" main.moon 2>&1 | grep -v '^Warning:')
	rc=$?
	if [[ $rc -eq 0 && -e lib.lua && -e main.lua && "$out" == *OK ]]; then
		echo "PASSED"
	else
		echo "FAILED"; failures=$((failures+1)); fi
	cd - >/dev/null && rm -rf "$tmp5"

	if [[ $failures -eq 0 ]]; then
		echo "All tests passed"
		exit 0
	else
		echo "$failures test(s) failed"
		exit 1
	fi
}

# Entry point
if [[ "${1:-}" == "--test" && $# -eq 1 ]]; then test_suite; exit $?; fi
main "$@"
