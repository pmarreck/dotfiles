#!/usr/bin/env bash

# The idea here is to use this as a pipe, like so:
#  echo "some code" | confirm | ssh user@host
#  or
#  curl "some URL with raw code" | confirm | bash
confirm() {
  tmpfile=$(mktemp)
  # use tee to split stdin to stderr and the temporary file
  tee "$tmpfile" >&2
  echo >&2
  # Prompt the user.
  >&2 read -p "Do you want to pass this code along? [Y/n] " response < /dev/tty
  case "$response" in
    [nN]*) 
      echo "Operation cancelled." >&2
      rm "$tmpfile"
      return 1
      ;;
    *)
      echo "Proceeding..." >&2
      cat "$tmpfile"
      rm "$tmpfile"
      ;;
  esac
}

# Run the function, passing along any args, if this file was run directly (such as via sudo) instead of as an include
# Sometimes, $0 contains a leading dash to indicate an interactive (or is it login?) shell,
# which is apparently an old convention (which also broke the basename call on OS X)
_me=$(basename "${0##\-}")
if [ "$_me" = "confirm" ]; then
	$_me "$@"
fi
unset _me
