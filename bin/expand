#!/usr/bin/env bash

debug() {
	[ -n "$DEBUG" ] && echo "DEBUG: $*" >&2
}

silence() {
	"$@" >/dev/null 2>&1
}

expand() {
	# Help function
	_show_help() {
		cat << EOF
expand: A utility for controlled glob expansion

USAGE:
	expand PATTERN                   Expand a glob pattern and print results
	expand COMMAND [ARG...]          Run a command with expanded arguments
	expand --test                    Run self-tests
	expand --help                    Show this help message

EXAMPLES:
	expand "*.jpg"                   Expand and print all jpg files
	expand ls -la "*.jpg"            Run ls -la with expanded jpg files
	expand jpegxl --lossless "*.jpg" Run jpegxl with expanded jpg files

DESCRIPTION:
	The expand function provides controlled glob expansion even when
	globbing is disabled (set -f). It preserves spaces in filenames
	and properly quotes results for shell consumption.

	When used with a command, it expands any glob patterns in the arguments
	before passing them to the command. If a pattern doesn't match any files,
	it's passed as-is to the command.
EOF
	}

	# Check for special arguments
	if [[ "$1" == "--help" || "$1" == "-h" ]]; then
		_show_help
		return 0
	fi
	if [[ $# -eq 0 ]]; then
		_show_help
		return 2
	fi

	# Store original globbing states to restore later
	local glob_disabled nullglob_set dotglob_set
	[[ -o noglob ]] && glob_disabled=true || glob_disabled=false
	[[ -o nullglob ]] && nullglob_set=true || nullglob_set=false
	[[ -o dotglob ]] && dotglob_set=true || dotglob_set=false
	
	# Warn if globbing is already enabled
	if ! $glob_disabled; then
		echo "Warning: 'expand' is being called when globbing is already enabled." >&2
		echo "This function is primarily intended for use when globbing is disabled (set -f)." >&2
	fi

	# Enable all globbing features
	set +f           # Enable globbing
	shopt -s nullglob # Empty glob patterns expand to nothing
	shopt -s dotglob  # Include dotfiles in glob expansion

	# Step 1: Check if first arg is a command
	local exec_command=""
	local args=( "$@" )
	if silence command -v "$1"; then
		exec_command="$1"
		shift
		args=( "$@" )
		debug "First argument is a command: $exec_command"
	fi

	# Step 2: Process all arguments
	local processed_args=()
	for arg in "${args[@]}"; do
		# If we have a command and arg starts with - or --, pass it through
		if [[ -n "$exec_command" && ("$arg" == -* || "$arg" == --*) ]]; then
			debug "Passing through option: $arg"
			processed_args+=("$arg")
		# If arg contains glob pattern
		elif [[ "$arg" == *[\*\?\[]* ]]; then
			debug "Processing glob pattern: $arg"

			# For patterns with spaces, use find instead of bash's built-in globbing
			# I'd prefer to keep this 100% Bash, but this is what worked for now and passes tests...
			if [[ "$arg" == *" "* ]]; then
				debug "Pattern contains spaces, using find"
				local found_files=()
				while IFS= read -r -d $'\0' file; do
					# Remove ./ prefix if present
					file="${file#./}"
					found_files+=("$file")
				done < <(find . -maxdepth 1 -name "$arg" -print0 2>/dev/null)

				# If no matches found, keep the original pattern
				if [[ ${#found_files[@]} -eq 0 ]]; then
					debug "No matches found for pattern with spaces: $arg"
					processed_args+=("$arg")
				else
					debug "Found ${#found_files[@]} matches for pattern with spaces: $arg"
					processed_args+=("${found_files[@]}")
				fi
			else
				# Use bash's built-in globbing for patterns without spaces
				local files=($arg)

				# If no matches found, keep the original pattern
				if [[ ${#files[@]} -eq 0 ]]; then
					debug "No matches found for pattern: $arg"
					processed_args+=("$arg")
				else
					debug "Found ${#files[@]} matches for pattern: $arg"
					processed_args+=("${files[@]}")
				fi
			fi
		else
			# Not a glob pattern, add as is
			debug "Adding non-glob argument: $arg"
			processed_args+=("$arg")
		fi
	done

	# Step 3: Sort and emit results
	local sorted_output
	if [[ ${#processed_args[@]} -gt 0 ]]; then
		# Sort the output
		sorted_output=$(printf "%s\n" "${processed_args[@]}" | sort)

		# Step 4: Execute command or print results
		if [[ -n "$exec_command" ]]; then
			# Convert sorted output back to array
			local sorted_args=()
			while IFS= read -r line; do
				[[ -z "$line" ]] && continue
				sorted_args+=("$line")
			done <<< "$sorted_output"

			debug "Executing: $exec_command ${sorted_args[*]}"
			"$exec_command" "${sorted_args[@]}"
			local retcode=$?

			# Restore original globbing states
			$glob_disabled && set -f
			$nullglob_set || shopt -u nullglob
			$dotglob_set || shopt -u dotglob

			return $retcode
		else
			# Print each item properly quoted
			while IFS= read -r item; do
				[[ -z "$item" ]] && continue
				builtin printf "%q " "$item"
			done <<< "$sorted_output"
			echo
		fi
	else
		# No arguments to process
		echo
	fi

	# Restore original globbing states
	$glob_disabled && set -f
	$nullglob_set || shopt -u nullglob
	$dotglob_set || shopt -u dotglob

	return 0
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		test_file="$(dirname "${BASH_SOURCE[0]}")/test/$(basename "${0##\-}")_test"
		if [ -f "$test_file" ]; then
			EXPAND_TEST_VERBOSE=true "$test_file"
		else
			echo "Error: Test file not found: $test_file" >&2
			exit 1
		fi
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
