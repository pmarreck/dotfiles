#!/usr/bin/env bash

debug() {
	[ -n "$DEBUG" ] && echo "DEBUG: $*" >&2
}

silence() {
	"$@" >/dev/null 2>&1
}

expand() {
	# Help function
	_show_help() {
		cat << EOF
expand: A utility for controlled glob expansion

USAGE:
	expand PATTERN                   Expand a glob pattern and print results
	expand COMMAND [ARG...]          Run a command with expanded arguments
	expand --test                    Run self-tests
	expand --help                    Show this help message

EXAMPLES:
	expand "*.jpg"                   Expand and print all jpg files
	expand ls -la "*.jpg"            Run ls -la with expanded jpg files
	expand jpegxl --lossless "*.jpg" Run jpegxl with expanded jpg files

DESCRIPTION:
	The expand function provides controlled glob expansion even when
	globbing is disabled (set -f). It preserves spaces in filenames
	and properly quotes results for shell consumption.

	When used with a command, it expands any glob patterns in the arguments
	before passing them to the command. If a pattern doesn't match any files,
	it's passed as-is to the command.
EOF
	}

	# Check for special arguments
	if [[ "$1" == "--help" || "$1" == "-h" ]]; then
		_show_help
		return 0
	fi
	if [[ $# -eq 0 ]]; then
		_show_help
		return 2
	fi

	# Store original globbing states to restore later
	local glob_disabled nullglob_set dotglob_set

	# Check if globbing is disabled (set -f sets the noglob option)
	# This is the proper way to check if set -f is active
	# Commented out because it always seems to be true (enabled) even though it's not
	# and the function works correctly...
	# if [[ $- == *f* ]]; then
	# 	glob_disabled=true
	# 	debug "Globbing is disabled (noglob is set)"
	# else
	# 	glob_disabled=false
	# 	echo "Warning: 'expand' is being called when globbing is already enabled." >&2
	# 	echo "This function is primarily intended for use when globbing is disabled (set -f)." >&2
	# 	debug "Globbing is enabled (noglob is not set)"
	# fi

	# Store other globbing options
	[[ -o nullglob ]] && nullglob_set=true || nullglob_set=false
	[[ -o dotglob ]] && dotglob_set=true || dotglob_set=false

	# Enable globbing but respect existing nullglob and dotglob settings
	set +f           # Enable globbing
	# We don't change nullglob and dotglob settings - respect user's preferences

	# Step 1: Check if first arg is a command
	local exec_command=""
	local args=("$@")

	# If first arg exists and is an executable, use it as command
	if [[ ${#args[@]} -gt 0 ]] && command -v "${args[0]}" &>/dev/null; then
		exec_command="${args[0]}"
		debug "Found command: $exec_command"
		# Remove the command from args
		args=("${args[@]:1}")

		# Special handling for nullglob in command mode
		if $nullglob_set; then
			debug "Command mode with nullglob set - will filter out non-matching patterns"
		fi
	fi

	local processed_args=()
	for arg in "${args[@]}"; do
		# If we have a command and arg starts with - or --, pass it through
		if [[ -n "$exec_command" && ("$arg" == -* || "$arg" == --*) ]]; then
			debug "Passing through option: $arg"
			processed_args+=("$arg")
		# If arg contains glob pattern
		elif [[ "$arg" == *[\*\?\[]* ]]; then
			debug "Processing glob pattern: $arg"

			# Special handling for command mode with nullglob
			if [[ -n "$exec_command" ]] && $nullglob_set; then
				debug "Command mode with nullglob set - checking if pattern matches any files"

				# Check if the pattern matches any files
				local matches=()

				# Temporarily enable nullglob for pattern matching
				shopt -s nullglob
				if [[ "$arg" == *" "* ]]; then
					# For patterns with spaces, use find
					while IFS= read -r -d $'\0' file; do
						# Remove ./ prefix if present
						file="${file#./}"
						matches+=("$file")
					done < <(find . -maxdepth 1 -name "$arg" -print0 2>/dev/null)
				else
					# For patterns without spaces, use bash globbing
					matches=($arg)
				fi
				shopt -u nullglob

				# If no matches and nullglob is set, skip this pattern entirely
				if [[ ${#matches[@]} -eq 0 ]]; then
					debug "No matches found for pattern '$arg' with nullglob set - skipping"
					continue
				fi

				# Otherwise, add the matches
				debug "Found ${#matches[@]} matches for pattern '$arg'"
				processed_args+=("${matches[@]}")
				continue
			fi

			# Handle patterns with spaces using find
			if [[ "$arg" == *" "* ]]; then
				debug "Pattern contains spaces, using find"
				local found_files=()

				# Check if pattern contains ** for recursive globbing
				local is_recursive=false
				if [[ "$arg" == *"**"* ]]; then
					is_recursive=true
					debug "Detected recursive globbing pattern with **"
				fi

				# Adjust find command based on recursive flag
				local find_cmd="find ."
				if ! $is_recursive; then
					find_cmd="$find_cmd -maxdepth 1"
				fi

				# If dotglob is set, include hidden files
				if $dotglob_set; then
					debug "dotglob is set, including hidden files in find"
					find_cmd="$find_cmd -name \"$arg\" -print0"
				else
					debug "dotglob is not set, excluding hidden files in find"
					# Exclude files that start with a dot
					find_cmd="$find_cmd -name \"$arg\" -not -path \"*/\.*\" -print0"
				fi

				debug "Find command: $find_cmd"

				while IFS= read -r -d $'\0' file; do
					# Remove ./ prefix if present
					file="${file#./}"
					found_files+=("$file")
				done < <(eval "$find_cmd" 2>/dev/null)

				# If no matches found and nullglob is not set, keep the original pattern
				if [[ ${#found_files[@]} -eq 0 ]]; then
					debug "No matches found for pattern with spaces: $arg"

					# If we're in command mode and nullglob is set, skip non-matching patterns
					if [[ -n "$exec_command" ]] && $nullglob_set; then
						debug "Command mode with nullglob set, skipping non-matching pattern"
						# Skip this pattern entirely
					else
						debug "Keeping original pattern"
						processed_args+=("$arg")
					fi
				else
					debug "Found ${#found_files[@]} matches for pattern with spaces: $arg"
					processed_args+=("${found_files[@]}")
				fi
			else
				# Check if pattern contains ** for recursive globbing
				if [[ "$arg" == *"**"* ]]; then
					debug "Detected recursive globbing pattern with **: $arg"

					# For recursive patterns, we use find to handle the traversal
					local found_files=()

					# Special handling for command mode with nullglob
					if [[ -n "$exec_command" ]] && $nullglob_set; then
						# First check if there are any matches using a quick find command
						local test_pattern="${arg//\*\*/\*}"
						local test_cmd="find . -path \"$test_pattern\" -type f -print -quit 2>/dev/null"
						debug "Testing recursive pattern with nullglob: $test_cmd"

						local test_result=$(eval "$test_cmd")
						if [[ -z "$test_result" ]]; then
							debug "No matches found for recursive pattern with nullglob - skipping: $arg"
							continue
						fi
						debug "Found matches for recursive pattern, proceeding: $arg"
					fi

					# Convert the pattern to something find can use with -path
					# We need to handle the ** pattern specially
					local find_pattern="$arg"

					# Replace ** with a wildcard that find's -path can use
					# This handles the common case of **/*.ext
					find_pattern="${find_pattern//\*\*/\*}"

					# Build the find command
					local find_cmd="find ."

					# Add dotglob handling
					if ! $dotglob_set; then
						find_cmd="$find_cmd -not -path \"*/\.*\""
					fi

					# Add the pattern matching
					find_cmd="$find_cmd -path \"$find_pattern\" -type f -print0"

					debug "Recursive find command: $find_cmd"

					# Execute the find command and collect results
					while IFS= read -r -d $'\0' file; do
						# Remove ./ prefix if present
						file="${file#./}"
						found_files+=("$file")
					done < <(eval "$find_cmd" 2>/dev/null)

					# Handle the results based on whether we found matches
					if [[ ${#found_files[@]} -eq 0 ]]; then
						debug "No matches found for recursive pattern: $arg"

						# If nullglob is set and we're in command mode, skip this pattern
						if [[ -n "$exec_command" ]] && $nullglob_set; then
							debug "Command mode with nullglob set, skipping non-matching recursive pattern"
							# Skip this pattern entirely
						else
							# Otherwise keep the original pattern
							debug "Keeping original recursive pattern"
							processed_args+=("$arg")
						fi
					else
						# We found matches, add them to the processed args
						debug "Found ${#found_files[@]} matches for recursive pattern: $arg"
						processed_args+=("${found_files[@]}")
					fi

					# Skip the regular globbing for this pattern
					continue
				else
					# Use bash's built-in globbing for non-recursive patterns without spaces
					local files=()

					# Enable nullglob temporarily to detect if there are no matches
					shopt -s nullglob
					files=($arg)
					shopt -u nullglob
				fi

				# If no matches found, handle based on mode and nullglob setting
				if [[ ${#files[@]} -eq 0 ]]; then
					debug "No matches found for pattern: $arg"

					# If we're in command mode and nullglob is set, skip non-matching patterns
					if [[ -n "$exec_command" ]] && $nullglob_set; then
						debug "Command mode with nullglob set, skipping non-matching pattern"
						# Skip this pattern entirely
					else
						debug "Keeping original pattern"
						processed_args+=("$arg")
					fi
				else
					debug "Found ${#files[@]} matches for pattern: $arg"
					processed_args+=("${files[@]}")
				fi
			fi
		else
			# Not a glob pattern, add as is
			debug "Adding non-glob argument: $arg"
			processed_args+=("$arg")
		fi
	done

	# Step 3: Sort and emit results
	local sorted_output
	if [[ ${#processed_args[@]} -gt 0 ]]; then
		# Sort the output
		sorted_output=$(printf "%s\n" "${processed_args[@]}" | sort)

		# Step 4: Execute command or print results
		if [[ -n "$exec_command" ]]; then
			# Convert sorted output back to array
			local sorted_args=()
			while IFS= read -r line; do
				[[ -z "$line" ]] && continue

				# Special handling for nullglob in command mode
				# If we're in command mode with nullglob set, skip any non-matching patterns
				# This is a safety check to catch any patterns that might have slipped through
				if $nullglob_set && [[ "$line" == *[*?[]* ]] && [[ ! -e "$line" ]]; then
					debug "Skipping non-matching pattern in command mode with nullglob: $line"
					continue
				fi

				sorted_args+=("$line")
			done <<< "$sorted_output"

			debug "Executing: $exec_command ${sorted_args[*]}"
			"$exec_command" "${sorted_args[@]}"
			local retcode=$?

			# Only restore the globbing state (noglob) since we didn't change nullglob or dotglob
			$glob_disabled && set -f

			return $retcode
		else
			# Print each item properly quoted
			while IFS= read -r item; do
				[[ -z "$item" ]] && continue
				builtin printf "%q " "$item"
			done <<< "$sorted_output"
			echo
		fi
	else
		# No arguments to process
		echo
	fi

	# Only restore the globbing state (noglob) since we didn't change nullglob or dotglob
	$glob_disabled && set -f

	return 0
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		test_file="$(dirname "${BASH_SOURCE[0]}")/test/$(basename "${0##\-}")_test"
		if [ -f "$test_file" ]; then
			EXPAND_TEST_VERBOSE=true "$test_file"
		else
			echo "Error: Test file not found: $test_file" >&2
			exit 1
		fi
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
