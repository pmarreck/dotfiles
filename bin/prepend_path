#!/usr/bin/env bash

prepend_path() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	function docs() {
		echo "Usage: prepend_path [-o|-h|--help] <path_to_prepend> [name_of_path_var, defaults to PATH]" >&2
		echo "Setting -o will print the new path to stdout instead of exporting it" >&2
		echo "Env var IGNORE_PREPEND_PATH_WARNINGS=true will suppress warnings" >&2
	}
	local stdout=false
	local IGNORE_PREPEND_PATH_WARNINGS=${IGNORE_PREPEND_PATH_WARNINGS:-false}
	case "$1" in
		-h|--help)
			docs
			return 0
			;;
		-o)
			stdout=true
			shift
			;;
		*)
			;;
	esac
	local dir="${1%/}"     # discard trailing slash
	local var="${2:-PATH}"
	if [ -z "$dir" ]; then
		docs
		return 2 # incorrect usage return code, may be an informal standard
	fi
	case "$dir" in
		/*) :;; # absolute path, do nothing
		*) $IGNORE_PREPEND_PATH_WARNINGS || echo "prepend_path warning: '$dir' is not an absolute path, which may be unexpected" >&2;;
	esac
	local newpath=${!var}
	[ -n "${DEBUG_PATHCONFIG}" ] && echo "Upon entry to prepend_path($dir), ${var} is ${!var}" >&2
	if [ -z "$newpath" ]; then
		$stdout || $IGNORE_PREPEND_PATH_WARNINGS || echo "prepend_path warning: $var was empty, which may be unexpected: setting to $dir" >&2
		$stdout && echo "$dir" || export ${var}="$dir"
		return
	fi
	# prepend to front of path
	newpath="$dir:$newpath"
	# remove all duplicates, retaining the first one encountered
	newpath=$(echo -n $newpath | awk -v RS=: -v ORS=: '!($0 in a) {a[$0]; print}')
	# remove trailing colon (awk's ORS (output record separator) adds a trailing colon)
	newpath=${newpath%:}
	[ -n "${DEBUG_PATHCONFIG}" ] && echo "After prepend_path($dir), ${var} is now $newpath" >&2
	$stdout && echo "$newpath" || export ${var}="$newpath"
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
