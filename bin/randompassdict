#!/usr/bin/env bash

randompassdict() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	needs shuf || return 1
	local random_source="${RANDOM_SOURCE:-/dev/random}"
	if [ $# -eq 0 ]; then
		echo "Usage: randompassdict <num-words> [<min-word-length default 4> [<max-word-length default 14>]]"
		echo "This function is defined in $BASH_SOURCE"
		# if [ "$PLATFORM" = "linux" ]; then
		#   echo "Note that on linux, this may require installation of the 'words' package"
		#   echo "or on NixOS, setting 'environment.wordlist.enable = true;' in your configuration.nix"
		#   echo "(which adds the 'scowl' package to your system and sets the WORDLIST env var)"
		# fi
		return 1
	fi
	local numwords=$1
	local minlen=${2:-4}
	local maxlen=${3:-14}
	local dict="$(load_and_filter_dict $minlen $maxlen)"
	local poolsize=$(printf "%s" "$dict" | wc -l)
	# why is poolsize getting spaces in front? No idea. Removing them.
	poolsize=${poolsize##* }
	local words=$(echo -n "$dict" | shuf --random-source=$random_source -r -n "$numwords" | tr '\n' ' ' | xargs)
	local combinations_with_thousands_sep=$(printf "%'.0f" $(calc ${poolsize}^${numwords}))
	if [[ -n "${JUST_OUTPUT_DICTIONARY}" ]]; then
		echo "$dict"
	else
		echo -n "$words"
		echo >&2
		echo >&2
		note "(out of a possible $poolsize available words in the dictionary that suit the requested length range [$minlen-$maxlen]"
		if [[ -n "${FILTERPROPERNOUNS}" ]]; then
			note "and that do not start with a capital letter,"
		fi
		note "for a total of ($poolsize ** $numwords) or $combinations_with_thousands_sep possible combinations)"
	fi
	# a former attempt that worked but was less flexible:
	#cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9\!\@\#\$\%\&\*\?' | fold -w $1 | head -n $2 | tr '\n' ' '
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
