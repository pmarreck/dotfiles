#!/usr/bin/env sh
# yuerun - YueScript transpile-and-run wrapper

set -eu

script_path=$(command -v "$0" 2>/dev/null || echo "$0")
script_dir=$(dirname "$script_path")
script_dir=$(cd "$script_dir" 2>/dev/null && pwd -P)
script_name=$(basename "$script_path")
script_path="$script_dir/$script_name"

usage() {
	cat <<EOF_USAGE
$script_name - YueScript transpile-and-run wrapper

DESCRIPTION:
	Enables YueScript files to be executed directly via hashbang lines.
	Automatically transpiles .yue files to .lua when needed, then runs
	the compiled Lua with luajit.

USAGE:
	$script_name [options] <file> [args...]

ARGUMENTS:
	file        YueScript file to run (.yue extension optional)
	args...     Arguments passed to the YueScript program

OPTIONS:
	-h, --help      Show this help information
	--test          Run built-in unit tests
	-o <path>       Explicit output Lua file (overrides cache)
	--cache <dir>   Directory for generated Lua output (overrides env)

ENVIRONMENT:
	YUE_BUILD_CACHE  Default directory for generated Lua files
EOF_USAGE
}

resolve_with_base() {
	base_dir=$1
	target_path=$2
	case $target_path in
		/*)
			printf '%s\n' "$target_path"
			;;
		*)
			printf '%s/%s\n' "$base_dir" "$target_path"
			;;
	esac
}

ensure_sources() {
	input=$1
	case $input in
		*.yue)
			base=${input%".yue"}
			src=$input
			;;
		*)
			if [ -e "$input" ]; then
				base=$input
				src=$input
			else
				base=$input
				src=$input.yue
			fi
			;;
	esac
	out=$base.lua
}

main() {
	if [ $# -lt 1 ]; then
		usage >&2
		return 1
	fi

	output_override=
	cache_override=
	while [ $# -gt 0 ]; do
		case $1 in
			-h|--help)
				usage
				return 0
				;;
			-o)
				if [ $# -lt 2 ]; then
					usage >&2
					return 1
				fi
				output_override=$2
				shift 2
				continue
				;;
			--cache)
				if [ $# -lt 2 ]; then
					usage >&2
					return 1
				fi
				cache_override=$2
				shift 2
				continue
				;;
			--cache=*)
				cache_override=${1#*=}
				shift
				continue
				;;
			--)
				shift
				break
				;;
			--*)
				usage >&2
				return 1
				;;
			*)
				break
				;;
		esac
	done

	if [ $# -lt 1 ]; then
		usage >&2
		return 1
	fi

	input=$1
	shift
	ensure_sources "$input"

	if [ ! -e "$src" ]; then
		printf "Error: '%s' not found.\n" "$src" >&2
		return 1
	fi

	src_dir_raw=$(dirname "$src")
	src_dir_abs=$( (cd "$src_dir_raw" 2>/dev/null && pwd -P) )
	if [ -z "$src_dir_abs" ]; then
		printf "Error: failed to resolve directory for '%s'.\n" "$src" >&2
		return 1
	fi

	cache_dir=$src_dir_abs
	if [ -n "${YUE_BUILD_CACHE:-}" ]; then
		cache_dir=$(resolve_with_base "$src_dir_abs" "$YUE_BUILD_CACHE")
	fi
	if [ -n "$cache_override" ]; then
		cache_dir=$(resolve_with_base "$src_dir_abs" "$cache_override")
	fi

	file_name=$(basename "$base")
	if [ -n "$output_override" ]; then
		lua_path=$(resolve_with_base "$src_dir_abs" "$output_override")
	else
		lua_path=$cache_dir/$file_name.lua
	fi

	build_cmd="$script_dir/yuebuild"
	if [ -n "$output_override" ]; then
		if ! "$build_cmd" -o "$output_override" "$src"; then
			return 1
		fi
	elif [ -n "$cache_override" ]; then
		if ! "$build_cmd" --cache "$cache_override" "$src"; then
			return 1
		fi
	else
		if ! "$build_cmd" "$src"; then
			return 1
		fi
	fi

	if [ ! -e "$lua_path" ]; then
		printf "Error: expected '%s' after build.\n" "$lua_path" >&2
		return 1
	fi

	if [ $# -gt 0 ]; then
		exec luajit "$lua_path" "$@"
	else
		exec luajit "$lua_path"
	fi
}

test_suite() {
	failures=0
	printf "Running yuerun tests...\n"

	printf "Test 1 (nonexistent file)... "
	if "$script_path" nonexistent.yue >/dev/null 2>&1; then
		printf "FAILED\n"
		failures=$((failures + 1))
	else
		printf "PASSED\n"
	fi

	printf "Test 2 (missing lua run)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "hello2"\n' > foo.yue
	out=$("$script_path" foo.yue 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "hello2" ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 3 (uptodate lua run)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "hello3"\n' > foo.yue
	"$script_dir/yuebuild" foo.yue >/dev/null 2>&1
	out=$("$script_path" foo.yue 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "hello3" ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 4 (input without .yue)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "xyz"\n' > baz.yue
	out=$("$script_path" baz 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "xyz" ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 5 (require dependency)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_test.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'print "lib loaded"\n' > lib.yue
	{
		printf 'require "lib"\n'
		printf 'io.write "OK"\n'
	} > main.yue
	out=$("$script_path" main.yue 2>&1 | grep -v '^Warning:')
	rc=$?
	if [ "$rc" -eq 0 ] && [ -e lib.lua ] && [ -e main.lua ]; then
		case "$out" in
			*OK)
				printf "PASSED\n"
				;;
			*)
				printf "FAILED\n"
				failures=$((failures + 1))
				;;
		esac
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 6 (--cache option)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_cache.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "CACHED"\n' > foo.yue
	out=$("$script_path" --cache build foo.yue 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "CACHED" ] && [ -e build/foo.lua ] && [ ! -e foo.lua ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 7 (YUE_BUILD_CACHE env)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_env.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "ENV"\n' > foo.yue
	out=$(YUE_BUILD_CACHE=cache "$script_path" foo.yue 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "ENV" ] && [ -e cache/foo.lua ] && [ ! -e foo.lua ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	printf "Test 8 (-o overrides cache)... "
	tmp=$(mktemp -d "${TMPDIR:-/tmp}/yuerun_output.XXXXXX") || exit 1
	oldpwd=$(pwd)
	cd "$tmp" || exit 1
	printf 'io.write "OUT"\n' > foo.yue
	out=$(YUE_BUILD_CACHE=cache "$script_path" --cache other -o output/custom.lua foo.yue 2>&1)
	rc=$?
	if [ "$rc" -eq 0 ] && [ "$out" = "OUT" ] && [ -e output/custom.lua ] && [ ! -e cache/foo.lua ] && [ ! -e foo.lua ]; then
		printf "PASSED\n"
	else
		printf "FAILED\n"
		failures=$((failures + 1))
	fi
	cd "$oldpwd" || exit 1
	rm -rf "$tmp"

	if [ "$failures" -eq 0 ]; then
		printf "All tests passed\n"
		return 0
	fi
	printf "%s test(s) failed\n" "$failures" >&2
	return "$failures"
}

if [ $# -eq 0 ]; then
	usage >&2
	exit 1
fi

case $1 in
	-h|--help)
		usage
		exit 0
		;;
	--test)
		if [ $# -ne 1 ]; then
			usage >&2
			exit 1
		fi
		test_suite
		exit $?
		;;
esac

main "$@"
