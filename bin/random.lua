-- This Lua file was automatically generated from random
-- Do not edit this file directly; modify the source file instead

local get_random_bytes
get_random_bytes = function(num_bytes)
	local urandom = io.open("/dev/urandom", "rb")
	if urandom then
		local bytes = urandom:read(num_bytes)
		urandom:close()
		if bytes and #bytes == num_bytes then
			return bytes
		end
	end
	local random_dev = io.open("/dev/random", "rb")
	if random_dev then
		local bytes = random_dev:read(num_bytes)
		random_dev:close()
		if bytes and #bytes == num_bytes then
			return bytes
		end
	end
	local result = ""
	for i = 1, num_bytes do
		local time_val = os.time() + os.clock() * 1000000 + i * 12345
		local byte_val = math.floor(time_val % 256)
		result = result .. string.char(byte_val)
	end
	return result
end
local bytes_to_integer
bytes_to_integer = function(bytes)
	local result = 0
	for i = 1, #bytes do
		result = result * 256 + string.byte(bytes, i)
	end
	return result
end
local random
random = function(start, end_val)
	if start == nil then
		start = 0
	end
	if end_val == nil then
		end_val = 100
	end
	local span = end_val - start + 1
	if span <= 1 then
		return start
	end
	local bytes_needed = math.ceil(math.log(span) / math.log(256)) + 1
	local max_val = 256 ^ bytes_needed
	local limit = math.floor(max_val / span) * span
	while true do
		local bytes = get_random_bytes(bytes_needed)
		local random_val = bytes_to_integer(bytes)
		if random_val < limit then
			return start + (random_val % span)
		end
	end
end
local show_help
show_help = function()
	print("Usage: random <start> <end>")
	print("")
	print("High-quality uniform random number generator using system entropy.")
	print("Outputs a random integer between <start> and <end> (inclusive).")
	print("If <start> is not specified, it defaults to 0")
	print("If <end> is not specified, it defaults to 100")
	print("")
	print("Sources entropy directly from /dev/urandom (with /dev/random fallback)")
	return print("and uses rejection sampling for perfect uniform distribution.")
end
local run_test
run_test = function()
	local test_file = tostring(os.getenv('HOME')) .. "/dotfiles/bin/test/random_test"
	local result = os.execute(tostring(test_file) .. " >/dev/null")
	return os.exit(result and 0 or 1)
end
local main
main = function()
	local _exp_0 = #arg
	if 0 == _exp_0 then
		io.stderr:write("(with a start of 0 and an end of 100)\n")
		return print(random())
	else
		local _exp_1 = arg[1]
		if "--help" == _exp_1 or "-h" == _exp_1 then
			return show_help()
		elseif "--test" == _exp_1 then
			return run_test()
		else
			local start = tonumber(arg[1])
			local end_val = tonumber(arg[2])
			if not start then
				io.stderr:write("Error: start value must be a number\n")
				os.exit(1)
			end
			if arg[2] and not end_val then
				io.stderr:write("Error: end value must be a number\n")
				os.exit(1)
			end
			return print(random(start, end_val))
		end
	end
end
return main()
