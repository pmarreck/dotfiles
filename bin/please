#!/usr/bin/env bash

please() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	needs curl
	needs jq
	needs gum from https://github.com/charmbracelet/gum
	local request response response_parsed response_parsed_cleaned args
	local plat=$(platform)
	request=$(_generate_curl_api_request_for_please "What is the $plat bash command to $@? Only return the command to run itself, do not describe anything. Only use commands and executables that are common on most $plat systems. Do not quote the response and do not use markdown.")
# printf "request: %s\n" "$request" >&2
	response=$(eval "gum spin --show-output -s line --title \"Figuring out how to do this...\" -- $request")
# printf "response: %s\n" "$response" >&2
	response_parsed=$(printf "%s" "$response" | jq --raw-output '.choices[0].message.content')
# printf "response_parsed: %s\n" "$response_parsed" >&2
	if [[ "$response_parsed" == "null" || "$?" != "0" ]]; then
		printf "Error:\n" >&2
		printf "%b\n" "$response" >&2
		printf "%b\n" "$response_parsed"
	else
		response_parsed_cleaned=$(printf "%s" "$response_parsed" | sed -e 's/^[\\n]\+//' -e 's/^[\n]\+//')
		printf "\e[0;33m%s\n\e[m" "$response_parsed_cleaned" >&2
		local choice=$(gum choose --limit 1 "Run it" "Copy to clipboard" "GTFO");
		case "$choice" in
			"Run it")
				printf "%s" "$response_parsed_cleaned" | bash;
				;;
			"Copy to clipboard")
				printf "Copying command to clipboard.\n";
				printf "%s" "$response_parsed_cleaned" | clip;
				;;
			*)
				printf "%s" "Aborted.";
				return 1;
				;;
		esac;
	fi
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
