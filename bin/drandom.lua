-- This Lua file was automatically generated from drandom
-- Do not edit this file directly; modify the source file instead

local bit = require("bit")
local LCG
do
	local _class_0
	local _base_0 = {
		next = function(self)
			self.state = (self.state * 1664525 + 1013904223) % (2 ^ 32)
			return self.state
		end,
		range = function(self, min, max)
			if min == nil then
				min = 0
			end
			if max == nil then
				max = 100
			end
			local span = max - min + 1
			if span <= 1 then
				return min
			end
			if span <= 16 then
				local raw = self:next()
				local upper_bits = bit.rshift(raw, 16)
				return min + (upper_bits % span)
			else
				local limit = math.floor(0xFFFFFFFF / span) * span
				local r
				while true do
					r = self:next()
					if r < limit then
						break
					end
				end
				return min + (r % span)
			end
		end
	}
	if _base_0.__index == nil then
		_base_0.__index = _base_0
	end
	_class_0 = setmetatable({
		__init = function(self, state)
			if state == nil then
				state = 1
			end
			self.state = state
			self.state = self.state == 0 and 1 or self.state
		end,
		__base = _base_0,
		__name = "LCG"
	}, {
		__index = _base_0,
		__call = function(cls, ...)
			local _self_0 = setmetatable({ }, _base_0)
			cls.__init(_self_0, ...)
			return _self_0
		end
	})
	_base_0.__class = _class_0
	LCG = _class_0
end
local get_seed_file
get_seed_file = function()
	local session_id = os.getenv('DRANDOM_SESSION') or 'default'
	return "/tmp/drandom_seed_" .. tostring(session_id)
end
local generate_initial_seed
generate_initial_seed = function()
	local time_ns = os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
	return (time_ns * 2654435761) % (2 ^ 32)
end
local read_seed_file
read_seed_file = function()
	local seed_file = get_seed_file()
	local file = io.open(seed_file, "r")
	if not file then
		return nil
	end
	local content = file:read("*a")
	file:close()
	return tonumber(content) or nil
end
local write_seed_file
write_seed_file = function(seed)
	local seed_file = get_seed_file()
	local file = io.open(seed_file, "w")
	if not file then
		return false
	end
	file:write(tostring(seed))
	file:close()
	return true
end
local drandom
drandom = function(start, end_val)
	if start == nil then
		start = 0
	end
	if end_val == nil then
		end_val = 100
	end
	local seed
	local env_seed = os.getenv("DRANDOM_SEED")
	if env_seed then
		if env_seed:match("^%x+$") then
			local seed_str = env_seed:sub(1, 16)
			seed = tonumber(seed_str, 16) or generate_initial_seed()
		else
			seed = tonumber(env_seed) or generate_initial_seed()
		end
	else
		seed = read_seed_file()
		if not seed then
			seed = generate_initial_seed()
		end
	end
	local rng = LCG(seed)
	local result = rng:range(start, end_val)
	if not env_seed then
		write_seed_file(rng.state)
	end
	return result
end
local show_help
show_help = function()
	print("Usage: drandom <start> <end>")
	print("       DRANDOM_SEED=<seed> drandom <start> <end>")
	print("")
	print("Deterministic random number generator using Linear Congruential Generator.")
	print("Outputs a random integer between <start> and <end> (inclusive).")
	print("If <start> is not specified, it defaults to 0")
	print("If <end> is not specified, it defaults to 100")
	print("")
	print("Set DRANDOM_SEED environment variable for reproducible sequences.")
	print("Seed can be a number or hex string.")
	print("")
	print("Uses high-quality LCG parameters with upper-bit extraction for small ranges")
	return print("to ensure good randomness across all range sizes.")
end
local run_test
run_test = function()
	local test_file = tostring(os.getenv('HOME')) .. "/dotfiles/bin/test/drandom_test"
	local result = os.execute(". " .. tostring(test_file))
	return os.exit(result == 0 and 0 or 1)
end
local reset_rng
reset_rng = function(seed)
	if seed == nil then
		seed = generate_initial_seed()
	end
	return write_seed_file(seed)
end
local get_state
get_state = function()
	local current_seed = read_seed_file()
	if not current_seed then
		return nil
	end
	return {
		seed = current_seed
	}
end
local main
main = function()
	local _exp_0 = #arg
	if 0 == _exp_0 then
		io.stderr:write("(with a start of 0 and an end of 100)\n")
		return print(drandom())
	else
		local _exp_1 = arg[1]
		if "--help" == _exp_1 or "-h" == _exp_1 then
			return show_help()
		elseif "--test" == _exp_1 then
			return run_test()
		elseif "--reset" == _exp_1 then
			local seed = arg[2]
			reset_rng(seed)
			return print("RNG reset" .. tostring(seed and ' with seed: ' .. seed or ''))
		elseif "--state" == _exp_1 then
			local state = get_state()
			if state then
				print("Seed file: " .. tostring(get_seed_file()))
				return print("Current seed: " .. tostring(state.seed))
			else
				return print("No seed file found at " .. tostring(get_seed_file()))
			end
		else
			local start = tonumber(arg[1])
			local end_val = tonumber(arg[2])
			if not start then
				io.stderr:write("Error: start value must be a number\n")
				os.exit(1)
			end
			if arg[2] and not end_val then
				io.stderr:write("Error: end value must be a number\n")
				os.exit(1)
			end
			return print(drandom(start, end_val))
		end
	end
end
_G.drandom = drandom
_G.reset_rng = reset_rng
_G.get_state = get_state
return main()
