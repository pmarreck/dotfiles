#!/usr/bin/env bash

uniquify_array() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return
	# ${AWK:-awk} '!seen[$0]++'
	# declare -n arr=$1  # indirect reference to the array name passed in as arg1
	# edit: forcing compatibility with bash < 4.2 (which doesn't support declare -n)
	# We can't use nameref, so use eval to indirectly reference the array
	eval 'arr=("${'"$1"'[@]}")'
	declare -A seen
	local unique_arr=()
	# Iterate over array elements, space-separated
	for value in "${arr[@]}"; do
		# Check if the value has been seen before
		if [[ -z "${seen[$value]}" ]]; then
			seen["$value"]=1
			unique_arr+=("$value")
		fi
	done
	# Assign unique values back to the original array using eval (grrr)
	eval "$1=(\"\${unique_arr[@]}\")"
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
