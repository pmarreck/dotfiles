#!/usr/bin/env bash

### jpegxl: a bash function to make conversions to/from jpegxl easier!

# Future Improvements:
# -----------------------------------------------------------------------------------
# 1. Batch Processing:
#    - Add ability to process multiple files or entire directories
#    - Implement a progress indicator for batch operations
#    - Add statistics summary for batch results
#
# 2. Additional Options:
#    - Add a --force flag to overwrite existing files without prompting
#    - Add a --dry-run option to show what would be done without making changes
#
# 3. Error Handling:
#    - Add timeout handling for conversion operations
#    - Implement disk space verification before large conversions
#    - Add file permission checks before writing output files
#
# 4. Performance:
#    - Implement parallel processing for batch operations
#    - Add memory usage limits for ImageMagick operations
#    - Use ramdisk for temporary files on supported systems
#
# 5. Documentation:
#    - Include benchmarks comparing different compression settings
#    - Add visual examples of quality vs. file size tradeoffs
#    - Create a man page for better system integration
#
# 6. Support for animated images (APNG, GIF) and maintaining animation in JXL format
# -----------------------------------------------------------------------------------

# Silence function - runs a command silently but preserves exit code
silence() {
	"$@" >/dev/null 2>&1
	return $?
}

# Check for required dependencies
check_dependencies() {
	local missing_deps=()

	# Check for JPEG XL tools
	if ! silence command -v cjxl; then
		missing_deps+=("cjxl")
	fi

	if ! silence command -v djxl; then
		missing_deps+=("djxl")
	fi

	# Check for ImageMagick
	if ! silence command -v magick; then
		missing_deps+=("ImageMagick")
	fi

	# Determine which stat command to use
	if silence command -v gstat; then
		# Use GNU stat from coreutils if available (macOS with homebrew/nix)
		STAT="gstat"
	elif silence stat --version; then
		# Use GNU stat if available (Linux)
		STAT="stat"
	else
		# No GNU stat available
		missing_deps+=("GNU stat (gstat)")
	fi
	export STAT

	# Determine which date command to use
	if silence command -v gdate; then
		# Use GNU date from coreutils if available (macOS with homebrew/nix)
		DATE="gdate"
	elif silence date --version; then
		# Use GNU date if available (Linux)
		DATE="date"
	else
		# No GNU date available
		missing_deps+=("GNU date (gdate)")
	fi
	export DATE

	# Determine which numfmt command to use
	if silence command -v gnumfmt; then
		# Use GNU numfmt from coreutils if available (macOS with homebrew/nix)
		NUMFMT="gnumfmt"
	elif silence numfmt --version; then
		# Use GNU numfmt if available (Linux)
		NUMFMT="numfmt"
	else
		# No GNU numfmt available, but this is optional
		NUMFMT=""
	fi
	export NUMFMT

	if [[ ${#missing_deps[@]} -gt 0 ]]; then
		echo "Error: Missing required dependencies: ${missing_deps[*]}" >&2
		if [[ " ${missing_deps[*]} " =~ " GNU stat (gstat) " || " ${missing_deps[*]} " =~ " GNU date (gdate) " ]]; then
			echo "Note: This script requires GNU versions of stat and date." >&2
			echo "On macOS, install them with: brew install coreutils" >&2
			echo "Or with Nix/nix-darwin: nix-shell -p coreutils-prefixed (or add to global flake.nix)" >&2
		fi
		return 1
	fi

	return 0
}

# Debug output function
debug() {
	[ -n "$DEBUG" ] && echo "DEBUG: $*" >&2
}

# Create a temporary file with a unique name
create_temp_file() {
	local extension=$1
	local temp_file

	# Create a temporary file with X's at the end (as required by mktemp)
	local base_temp=$(mktemp -t jpegxl.XXXXXX)

	# Rename it to have the correct extension
	temp_file="${base_temp}.${extension}"
	mv "$base_temp" "$temp_file"

	debug "Created temporary file: $temp_file"
	echo "$temp_file"
}

# Compute the output path for a file
compute_output_path() {
	local input_file="$1"
	local extension="${input_file##*.}"
	extension="${extension,,}"  # Convert to lowercase
	local to_format="${2:-jxl}"  # Default output format is jxl
	
	# Replace the extension with the target format
	local output_path="${input_file%.*}.${to_format}"
	echo "$output_path"
}

# Display compression ratio
display_compression_ratio() {
	local original_file="$1"
	local new_file="$2"
	
	# Get file sizes using the detected STAT command
	local original_size=$($STAT -c "%s" "$original_file")
	local new_size=$($STAT -c "%s" "$new_file")
	
	# Calculate percentage
	local percentage=$(echo "scale=2; 100 * $new_size / $original_size" | bc)
	
	# Format sizes for display
	local original_size_display="$original_size"
	local new_size_display="$new_size"
	
	# Use human-readable sizes if NUMFMT is available
	if [[ -n "$NUMFMT" ]]; then
		original_size_display=$(echo "$original_size" | $NUMFMT --to=iec)
		new_size_display=$(echo "$new_size" | $NUMFMT --to=iec)
	fi
	
	# Display the result
	echo "$original_file â†’ $new_file ($new_size_display, ${percentage}% of original $original_size_display)"
}

print_help() {
	cat << EOF
Usage: jpegxl [OPTIONS] FILE...

Convert images to and from JPEG XL format.

Options:
	--help, -h               Show this help message and exit
	--effort=N               Set compression effort (1-10, default: 10)
	--distance=N             Set compression distance (0-15, default: 1)
													 0 is lossless, higher values = more lossy
	--quality=N              Set compression quality (1-100, default: 93)
													 Equivalent to setting distance, but in a more familiar scale
	--lossy                  Use lossy compression (default: lossless)
	--lossless               Use lossless compression
	--no-hdr                 Disable HDR preservation (default: enabled)
	--basic                  Use basic compression settings (effort=5, lossy)
	--to=FORMAT              Convert JXL to another format (jpeg, png, etc.)
	--preserve-timestamps    Preserve original file creation/modification timestamps
	test                     Run self-test

Environment Variables:
	JPEGXL_DEFAULT_EFFORT    Set default compression effort (1-10, default: 10)
	JPEGXL_DEFAULT_DISTANCE  Set default compression distance (0-15, default: 1)
	DEBUG                    Enable debug output

Examples:
	# Convert a JPEG to JXL (lossless by default)
	jpegxl image.jpg

	# Convert a JPEG to JXL with lossy compression
	jpegxl --lossy image.jpg

	# Convert a JPEG to JXL with specific quality
	jpegxl --quality=80 image.jpg

	# Convert a JXL back to JPEG
	jpegxl --to=jpeg image.jxl

	# Convert a JXL to PNG
	jpegxl --to=png image.jxl

	# Preserve original file timestamps
	jpegxl --preserve-timestamps image.jpg

Notes:
	- By default, the script preserves as much data as possible (lossless, HDR, metadata)
	- Use --lossy or --basic to sacrifice quality for compression
	- Use --no-hdr to disable HDR preservation

Dependencies:
	- JPEG XL tools (cjxl, djxl)
	- ImageMagick (convert, identify)
	- ExifTool (optional, for better metadata handling)
EOF
}

jpegxl() {
	# Check dependencies
	check_dependencies || return 1

	# Default settings
	local effort=10
	local distance=1
	local lossy=false
	local preserve_timestamps=false
	local to_format=""
	local quality=90
	local output=""  # Initialize output variable
	local original_output="" # Initialize original output variable
	local file=""

	# Parse arguments
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				print_help
				return 0
				;;
			test)
				# We now defer to the separate test file
				"$HOME/dotfiles/bin/test/jpegxl_test"
				return $?
				;;
			--effort=*)
				effort="${1#*=}"
				;;
			--distance=*)
				distance="${1#*=}"
				;;
			--quality=*)
				quality="${1#*=}"
				# Convert quality to distance (inverse relationship)
				# quality 100 -> distance 0, quality 1 -> distance 15
				if [[ "$quality" -ge 100 ]]; then
					distance=0
				else
					distance=$(echo "scale=2; 15 - ($quality / 100 * 15)" | bc | awk '{printf "%.0f", $0}')
				fi
				;;
			--lossy)
				lossy=true
				;;
			--lossless)
				lossy=false
				# When explicitly set to lossless, ensure distance is 0
				distance=0
				;;
			--no-hdr)
				# Deprecated and unused now, kept for backward compatibility
				debug "Option --no-hdr is deprecated and has no effect"
				;;
			--basic)
				effort=5
				lossy=true
				;;
			--preserve-timestamps)
				preserve_timestamps=true
				;;
			--to=*)
				to_format="${1#*=}"
				;;
			-*)
				echo "Unknown option: $1" >&2
				print_help
				return 1
				;;
			*)
				# Assume this is the file path
				if [[ -z "$file" ]]; then
					file="$1"
				else
					echo "Error: Only one input file can be processed at a time" >&2
					print_help
					return 1
				fi
				;;
		esac
		shift
	done

	# If no file is provided, show help
	if [[ -z "$file" ]]; then
		echo "Error: No input file specified" >&2
		print_help
		return 1
	fi

	# Check for conflicting options and make them consistent
	if [[ "$lossy" == "true" && "$distance" -eq 0 ]]; then
		echo "Warning: Conflicting options: --lossy and --distance=0 (lossless)" >&2
		echo "Using --lossless mode (--distance=0 takes precedence)" >&2
		lossy=false
	fi

	# If --lossless is specified but distance is not 0, adjust distance
	if [[ "$lossy" == "false" && "$distance" -ne 0 ]]; then
		echo "Warning: Setting distance to 0 for lossless mode" >&2
		distance=0
	fi

	# Debug mode
	if [[ "$DEBUG" == "true" ]]; then
		debug "Effort set to: $effort"
		debug "Distance set to: $distance"
		debug "Lossy mode: $lossy"
		debug "Preserve timestamps: $preserve_timestamps"
	fi

	# Check if file exists
	if [[ ! -f "$file" ]]; then
		echo "Error: File not found: $file" >&2
		return 1
	fi

	# Get file extension
	local extension="${file##*.}"
	extension="${extension,,}"  # Convert to lowercase
	debug "File extension: $extension"

	# Create a temporary PNG for formats that need conversion
	local temp_files=()
	local original_file="$file"
	local conversion_done=false

	# Set output path for all formats
	if [[ "$extension" != "jxl" || -n "$to_format" ]]; then
		# For non-JXL files or when converting JXL to another format
		if [[ "$extension" != "jxl" ]]; then
			# For non-JXL files, set output to .jxl
			output=$(compute_output_path "$file" "jxl")
		fi
	fi
	debug "Output file: $output"

	# Skip processing if we're converting from JXL to another format
	if [[ "$extension" == "jxl" && -n "$to_format" ]]; then
		# Handle JXL to other format conversion
		output=$(compute_output_path "$file" "$to_format")
		debug "Output file: $output"

		case "$to_format" in
			jpeg|jpg)
				debug "Converting JXL to JPEG"
				if ! djxl -q "$quality" "$file" "$output" 2>/tmp/djxl_error.log; then
					echo "ERROR: Failed to convert JXL to JPEG" >&2
					cat /tmp/djxl_error.log >&2
					return 1
				fi
				;;
			png)
				debug "Converting JXL to PNG"
				if ! djxl "$file" "$output" 2>/tmp/djxl_error.log; then
					echo "ERROR: Failed to convert JXL to PNG" >&2
					cat /tmp/djxl_error.log >&2
					return 1
				fi
				;;
			webp)
				debug "Converting JXL to WebP"
				# First convert to PNG as intermediate format
				local temp_png=$(create_temp_file "png")
				temp_files+=("$temp_png")
				
				if ! djxl "$file" "$temp_png" 2>/tmp/djxl_error.log; then
					echo "ERROR: Failed to convert JXL to PNG (intermediate)" >&2
					cat /tmp/djxl_error.log >&2
					return 1
				fi
				
				# Then convert PNG to WebP
				if ! magick "$temp_png" -quality "$quality" "$output" 2>/tmp/magick_error.log; then
					echo "ERROR: Failed to convert PNG to WebP" >&2
					cat /tmp/magick_error.log >&2
					return 1
				fi
				;;
			*)
				echo "Unsupported output format: $to_format" >&2
				return 1
				;;
		esac
		
		# Preserve timestamps if requested
		if [[ "$preserve_timestamps" == "true" ]]; then
			debug "Preserving timestamps from $file to $output"
			touch -r "$file" "$output"
		fi
		
		# Display compression ratio
		display_compression_ratio "$file" "$output"
		
		return 0
	fi

	# Create a temporary PNG for formats that need conversion (webp/heic only)
	if [[ "$extension" == "webp" || "$extension" == "heic" ]]; then
		original_output="$output"
		debug "Setting output path: $original_output"
		
		temp_png=$(create_temp_file "png")
		temp_files+=("$temp_png")
		debug "Converting $extension to PNG using ImageMagick: $file -> $temp_png"
		
		# Handle HEIC files
		if [[ "$extension" == "heic" ]]; then
			debug "Using special handling for HEIC files"
			
			ios18_heic=false
			if magick "$file" -alpha off -colorspace sRGB "$temp_png" 2>/tmp/magick_error.log; then
				debug "Successfully converted HEIC using ImageMagick with special options"
			elif command -v heif-convert &>/dev/null; then
				debug "Trying heif-convert for HEIC conversion"
				if heif-convert "$file" "$temp_png" 2>/tmp/heif_error.log; then
					debug "Successfully converted using heif-convert"
				else
					if grep -q "Too many auxiliary image references" /tmp/heif_error.log || 
						 grep -q "Too many auxiliary image references" /tmp/magick_error.log; then
						ios18_heic=true
					else
						echo "heif-convert failed with standard error:" >&2
						cat /tmp/heif_error.log >&2
					fi
					
					if [[ "$ios18_heic" == "false" ]]; then
						if magick convert "$file" -colorspace sRGB "$temp_png" 2>/tmp/magick_error2.log; then
							debug "Successfully converted using alternative ImageMagick options"
						else
							echo "All standard HEIC conversion methods failed:" >&2
							cat /tmp/magick_error.log >&2
							cat /tmp/magick_error2.log >&2
							return 1
						fi
					fi
				fi
			else
				if grep -q "Too many auxiliary image references" /tmp/magick_error.log; then
					ios18_heic=true
				else
					echo "ERROR: Failed to convert HEIC. Please install heif-convert or update ImageMagick" >&2
					cat /tmp/magick_error.log >&2
					return 1
				fi
			fi
			
			if [[ "$ios18_heic" == "true" ]]; then
				echo "=== JPEGXL ERROR ===" >&2
				echo "ERROR: Cannot convert iOS 18 HEIC file with 'Too many auxiliary references'" >&2
				echo "This is due to a recent iOS 18 format change by Apple that current tools don't support yet" >&2
				echo "Workaround: Open the HEIC file in a photo editor and save as JPG/PNG first" >&2
				echo "===================" >&2
				return 1
			fi
		# Handle WebP files
		elif [[ "$extension" == "webp" ]]; then
			if ! magick "$file" "$temp_png" 2>/tmp/magick_error.log; then
				echo "ERROR: Failed to convert WebP to PNG using ImageMagick" >&2
				
				if command -v dwebp &>/dev/null; then
					debug "Using dwebp for conversion"
					if dwebp "$file" -o "$temp_png"; then
						debug "Successfully converted using dwebp"
					else
						return 1
					fi
				else
					if magick convert "$file" -alpha on "$temp_png" 2>/tmp/magick_error2.log; then
						debug "Successfully converted using alternative ImageMagick options"
					else
						echo "Alternative conversion also failed:" >&2
						cat /tmp/magick_error2.log >&2
						return 1
					fi
				fi
			fi
		fi
		
		if [[ ! -f "$temp_png" ]]; then
			echo "ERROR: Temporary PNG file was not created: $temp_png" >&2
			return 1
		fi
		debug "Temporary PNG file size: $($STAT -c "%s" "$temp_png") bytes"
		file="$temp_png"
		extension="png"
		output="$original_output"
		debug "Using temporary file: $file"
		debug "Output will be saved to: $output"
	fi

	# Perform the conversion based on file type and options
	if [[ "$extension" == "jpg" || "$extension" == "jpeg" ]]; then
		if [[ "$lossy" == "true" ]]; then
			debug "Using lossy mode for JPEG conversion with distance $distance"
			debug "cjxl -e $effort -d $distance \"$file\" \"$output\""
			cjxl -e "$effort" -d "$distance" "$file" "$output"
		else
			debug "Using lossless JPEG transcoding"
			debug "cjxl -e $effort --lossless_jpeg=1 \"$file\" \"$output\""
			cjxl -e "$effort" --lossless_jpeg=1 "$file" "$output"
		fi
	elif [[ "$lossy" == "true" ]]; then
		debug "Using lossy mode for $extension conversion with distance $distance"
		debug "cjxl -e $effort -d $distance \"$file\" \"$output\""
		cjxl -e "$effort" -d "$distance" "$file" "$output"
	else
		debug "Using lossless mode for $extension conversion"
		debug "cjxl -e $effort -d 0 \"$file\" \"$output\""
		cjxl -e "$effort" -d 0 "$file" "$output"
	fi

	# Preserve timestamps if requested
	if [[ "$preserve_timestamps" == "true" ]]; then
		debug "Preserving timestamps from $file to $output"
		touch -r "$original_file" "$output"
	fi

	# Show compression ratio
	if [[ -f "$output" ]]; then
		display_compression_ratio "$original_file" "$output"
	fi

	# Clean up temporary files
	for temp_file in "${temp_files[@]}"; do
		if [[ -f "$temp_file" ]]; then
			debug "Removing temporary file: $temp_file"
			rm -f "$temp_file"
		fi
	done
}

# Run the function if this script is executed directly, avoiding double execution
if ! (return 0 2>/dev/null); then
	# We're being run directly, not sourced
	_me=$(basename "${0##\-}")
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		jpegxl "$@"
	fi
fi
unset _me