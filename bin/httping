#!/usr/bin/env bash

show_help() {
	cat << 'EOF'
httping - Multi-site HTTP ping monitor using tmux and gping

DESCRIPTION:
		This script creates a tmux session with multiple panes, each running gping
		to monitor HTTP response times for different websites. It overrides another
		project named "httping" which didn't have a working Mac version.

USAGE:
		httping [--about|--help]

OPTIONS:
		--about, --help    Show this help message

KEYBINDS:
		q                  Quit and kill the entire session

DEFAULT SITES:
		google.com, reddit.com, chatgpt.com, facebook.com, x.com, amazon.com

CONFIGURATION:
		Sites can be configured via the HTTPING_SITES environment variable:
		export HTTPING_SITES="site1.com;site2.com;site3.com"

DEPENDENCIES:
		tmux               Terminal multiplexer (required)
		gping              Graphical ping tool (required)

EXAMPLES:
		httping                           # Run with default sites
		HTTPING_SITES="github.com;stackoverflow.com" httping

EOF
}

parse_sites() {
	local sites_string="${HTTPING_SITES:-google.com;reddit.com;chatgpt.com;facebook.com;x.com;amazon.com}"
	IFS=';' read -ra sites <<< "$sites_string"
	printf '%s\n' "${sites[@]}"
}

check_dependencies() {
	local missing_deps=()

	if ! command -v tmux &> /dev/null; then
		missing_deps+=("tmux")
	fi

	if ! command -v gping &> /dev/null; then
		missing_deps+=("gping")
	fi

	if [ ${#missing_deps[@]} -gt 0 ]; then
		echo "Missing dependencies: ${missing_deps[*]}" >&2
		echo "Please install them first." >&2
		return 1
	fi
}

httping() {
	# Parse arguments before checking dependencies
	case "${1:-}" in
		--about|--help)
			show_help
			return 0
			;;
		"")
			# No arguments, proceed normally
			;;
		*)
			echo "Unknown option: $1" >&2
			echo "Use --help for usage information." >&2
			return 1
			;;
	esac

	# Check dependencies after argument parsing
	if ! check_dependencies; then
		return 1
	fi

	local session_name
	session_name="ping_session_$$"

	# Get sites from environment or use defaults
	local sites
	readarray -t sites < <(parse_sites)

	if [ ${#sites[@]} -eq 0 ]; then
		echo "No sites configured. Set HTTPING_SITES or use defaults." >&2
		return 1
	fi

	# Create the tmux session with the first site
	tmux new-session -d -s "${session_name}" "gping ${sites[0]}"

	# Set up key binding to kill the entire session with 'q'
	tmux bind-key -n q kill-session -t "${session_name}"

	# Split horizontally for remaining sites (creates horizontal stripes)
	for ((i=1; i<${#sites[@]}; i++)); do
		tmux split-window -v "gping ${sites[$i]}"
		# Select even layout to keep panes equal sized
		tmux select-layout even-vertical
	done

	# Attach to the session
	tmux attach-session -t "${session_name}"
}

# Run the function if this script is executed directly
if ! (return 0 2>/dev/null); then
	# Check if we are running tests
	if [ "$1" = "--test" ]; then
		# Run tests from the test file
		. "$HOME/dotfiles/bin/test/$(basename "${0##\-}")_test"
	else
		# If called directly, pass all arguments to the function
		$(basename "${0##\-}") "$@"
	fi
fi
