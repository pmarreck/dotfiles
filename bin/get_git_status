#!/usr/bin/env bash

ltrim() {
  local var="$*";
  var="${var#"${var%%[![:space:]]*}"}";
  printf '%s' "$var"
}

# rtrim() {
#   local var="$*";
#   var="${var%"${var##*[![:space:]]}"}";
#   printf '%s' "$var"
# }

# alerting in yellow to stderr
ANSI="\e["
TXTDFT="0;39m"
TXTYLW="0;33m"
note() {
  >&2 printf "$ANSI$TXTYLW%s$ANSI$TXTDFT\n" "$@"
}

get_git_status() {
	[ -n "${EDIT}" ] && unset EDIT && edit_function "${FUNCNAME[0]}" "$BASH_SOURCE" && return;
	needs git "install git"
	local git_dir proj_root shortstat result fetchout
	git_dir="$1"
	[ -z "$git_dir" ] && git_dir="$PWD"
	proj_root="${git_dir%/.git}"
	if [ -d "${proj_root}/.git" ]; then
		if git -C "$proj_root" rev-parse --is-inside-work-tree &>/dev/null; then
			# try to update the repo to upstream
			fetchout=$(git -C "$proj_root" fetch 2>&1)
			if [ $? -ne 0 ]; then
				echo -e "[WARNING: Failed to fetch upstream for $proj_root]\n$fetchout"
			fi
			echo -ne "$proj_root"
			shortstat=$(git -C "$proj_root" diff --shortstat 2>/dev/null)
			shortstat=$(ltrim "$shortstat")
			result=$?
			if [ -n "$shortstat" ] && [ "$result" -eq 0 ]; then
				echo " [$shortstat]"
			elif [ "$result" -ne 0 ]; then
				echo " [WARNING: Failed to get git status]"
			else
				echo
			fi
		else
			echo "WARNING: Looks like a Git repository but is invalid: $proj_root" >&2
		fi
	else
		echo "WARNING: Doesn't look like a Git repository: $proj_root" >&2
	fi
}
export -f get_git_status

# Run the function, passing along any args, if this file was run directly instead of as an include.
# Sometimes, $0 contains a leading dash to indicate an interactive (or is it login?) shell,
# which is apparently an old convention (which also broke the basename call on OS X)
_me=$(basename "${0##\-}")
if [ "$_me" = "get_git_status" ]; then
	$_me "$@"
fi
unset _me
